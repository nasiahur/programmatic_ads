import os
import platform

"""
Django settings for console project.
Generated by 'django-admin startproject' using Django 1.8.17.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(__file__))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2(dbvx&#9_#xckh9)6a5r-*!6o*e)28vel!6c7xrnsx-mf_*$_'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'frame',
    'traffic',
    'squid',
    'safety',    
    'antivirus',
    'node',    
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'console.middleware.LoginRequiredMiddleware'
)

ROOT_URLCONF = 'console.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "frame", "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': True,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'node.context_processors.node',
                'safety.context_processors.safety',
                'squid.context_processors.is_pfsense'
            ],
        },
    },
]

WSGI_APPLICATION = 'console.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, '..', 'db', 'config.sqlite'),
    },
    'node': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, '..', 'db', 'node.sqlite'),
    }
}

# the dicts with MySQL and SQLite specific settings
WEBSAFETY_MONITOR_DB_SQLITE = {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': os.path.join(BASE_DIR, '..', 'db', 'monitor.sqlite')
}
WEBSAFETY_MONITOR_DB_MYSQL = {
    'ENGINE'  : 'django.db.backends.mysql',
    'NAME'    : 'websafety_monitor',
    'USER'    : 'websafety',    # new in 4.6 - specific 'websafety' user inside mysql - to fix new mysql security settings on ubuntu 16
    'PASSWORD': 'Passw0rd',     # only this can be adjusted
    'HOST'    : '127.0.0.1',    # only this can be adjusted
    'PORT'    : '3306'          # only this can be adjusted
}

# we switch either to MySQL or SQLite at restart based on presence of this file
if not os.path.exists(os.path.join(BASE_DIR, "console", "database.mysql")):
    DATABASES['monitor'] = WEBSAFETY_MONITOR_DB_SQLITE   # by default we use SQLite database in /opt/websafety/var/db
else:
    DATABASES['monitor'] = WEBSAFETY_MONITOR_DB_MYSQL    # for huge monitoring data it is better to use MySQL        

DATABASE_ROUTERS = [ "traffic.routers.MonitorRouter", "node.routers.NodeRouter" ]

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
LANGUAGE_CODE = 'en-us'
USE_I18N  = True
USE_L10N  = True

# current problem with Django is that it MUST have the default timezone set in settings
# because it cannot read it from the system (not sure why); so on Ubuntu/Debian our
# ui will generate the timezone.setting file next to this settings.py; luckily changing
# timezone is usually one time action and doing that requires reboot of the machine anyway

# set default time zone (note if you are NOT on Ubuntu/Debian - change this setting to *your* timezone)
TIME_ZONE = "Europe/Amsterdam"

# construct the path to external file (in the try block for sure)
try:

    tz_value = ""
    tz_file  = os.path.join(BASE_DIR, "console", "timezone.setting")
    if os.path.isfile(tz_file):
        with open(tz_file, 'r') as fin:
            tz_value = fin.readline()

    import pytz

    if tz_value not in pytz.all_timezones:
        raise Exception("Wrong timezone %s in settings file %s, bug???" % (tz_value, tz_file))

    TIME_ZONE = tz_value

except Exception as e:
    pass

# let django store everything in the database in UTC and convert everything automatically to user's timezone
USE_TZ    = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.6/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, "www", "static"),)

LOGIN_EXEMPT_URLS = [
    r'^squid/ssl/der$',
    r'^proxy.pac$',
    r'^wpad.dat?$',
    r'^antivirus/safebrowsing/blocked?$',
]
