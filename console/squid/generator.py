import os
import shutil

#
# business logic (no django related code)
#
from _domain.utils import FileWriter, JsonDumper
from _domain.squid import \
    BinaryNegotiateWrapperAuth, \
    BinaryNegotiateKerberosAuth, \
    BinaryBasicLdapAuth, \
    BinaryBasicRadiusAuth, \
    BinaryBasicNcsaAuth, \
    BinarySslCrtd

#
# django
#
from django.template import loader
from utility.generator import BaseGenerator

#
# ours
#
from squid.models import *
from antivirus.models import *
from safety.models import Network as WebSafetyNetwork


#
#
#
class ConfFileWriter:

    def write(self, folder, file, objects):

        # based on each django object we create an array of (value => comments[])
        data = []
        for object in objects:
            data.append( { "value": object.value, "comments": object.comment.splitlines() } )
    
        # for squid it is important that conf files containing lists of objects are sorted
        data.sort(key=lambda x: len(x["value"]))

        # construct data string
        data_str = ""
        data_str += "#\n"
        data_str += "# PLEASE DO NOT EDIT THIS FILE MANUALLY - it is regenerated by Web Safety UI\n"
        data_str += "#\n"
        data_str += "#-----BEGIN GENERATED CONFIGURATION-----\n"
        

        for item in data:
            
            item_str = ""
            for comment in item["comments"]:
                stripped  = comment.rstrip().rstrip('\n').rstrip()
                if len(stripped) > 0:
                    item_str += "# %s\n" % stripped
                else:
                    item_str += "#\n"

            if len(item_str) > 0:
                data_str += item_str
            data_str += "%s\n" % item["value"]

        data_str += "#-----END GENERATED CONFIGURATION-----\n"
        
        # and now write            
        writer = FileWriter(folder)
        writer.write(file, data_str)


#
#
#
class ConfFileWriterAdvanced:

    def write(self, folder, file, text):

        # construct data string
        data_str = ""
        data_str += "#\n"
        data_str += "# PLEASE DO NOT EDIT THIS FILE MANUALLY - it is regenerated by Web Safety UI\n"
        data_str += "#\n"
        data_str += "#-----BEGIN GENERATED CONFIGURATION-----\n"
        data_str += text + "\n"
        data_str += "#-----END GENERATED CONFIGURATION-----\n"
        
        # and now write            
        writer = FileWriter(folder)
        writer.write(file, data_str)

#
# helper function
#
def is_auth_enabled():

    if AuthLocalDb.objects.first().enable:
        return True

    if AuthRadius.objects.first().enable:
        return True

    if AuthAd.objects.first().krb5_enable:
        return True

    if AuthAd.objects.first().ntlm_enable:                
        return True

    if AuthAd.objects.first().ldap_enable:
        return True

    return False

#
# 
#
class Generator(BaseGenerator):

    def __init__(self, root_dir):

        # call the base class
        super(Generator, self).__init__(root_dir)
        
    def generate_config(self, target_dir):

        # write auth jsons
        self.write_auth(target_dir)
        self.write_auth_labels(target_dir)
        
        # generate various squid item lists
        self.generate_authentication_items(target_dir)
        self.generate_adaptation_items(target_dir)
        self.generate_ssl_items(target_dir)
        self.generate_ssl_intermediate_certs(target_dir)
        self.generate_cache_items(target_dir)
        self.generate_urlrewrite_items(target_dir)
        
        # generate squid confs
        self.generate_config_auth(target_dir)
        self.generate_config_acls(target_dir)
        self.generate_config_network(target_dir)
        self.generate_config_ssl(target_dir)
        self.generate_config_cache(target_dir)
        self.generate_config_troubleshooting(target_dir)
        self.generate_config_url_rewriting(target_dir)
        self.generate_config_administrative(target_dir)
        self.generate_config_wccp(target_dir)
        self.generate_config_icap(target_dir)
        self.generate_config_ecap(target_dir)
        self.generate_config_adaptation(target_dir)
        self.generate_config_dns(target_dir)
        self.generate_config_miscellaneous(target_dir)

        # generate main squid configuration sections, those we do not process are uncommended
        sections = [
            "squid.conf", 
            "header.conf", 
            "smp.conf", 
            #CUSTOMIZED "authentication.conf", 
            #CUSTOMIZED "access_controls.conf", 
            #CUSTOMIZED "network.conf",
            #CUSTOMIZED "ssl.conf", 
            #CUSTOMIZED "sslcrtd.conf", 
            "neighbor_selection.conf", 
            #CUSTOMIZED "memory_cache.conf", 
            #CUSTOMIZED "disk_cache.conf", 
            "logfile.conf", 
            #CUSTOMIZED "troubleshooting.conf", 
            "ftp_gatewaying.conf", 
            "external_support_programs.conf", 
            #CUSTOMIZED "url_rewriting.conf", 
            "store_id.conf", 
            #CUSTOMIZED "cache_tuning.conf",
            "http.conf", 
            "timeouts.conf", 
            #CUSTOMIZED "administrative.conf", 
            "cache_registration_service.conf", 
            "httpd_accelerator.conf", 
            "delay_pool.conf", 
            "persistent_connections.conf", 
            "cache_digest.conf", 
            "snmp.conf", 
            "icp.conf", 
            "multicast_icp.conf", 
            "icons.conf", 
            "error_page.conf", 
            "request_forwarding.conf", 
            "advanced_networking.conf", 
            #CUSTOMIZED "icap.conf", 
            #CUSTOMIZED "ecap.conf", 
            #CUSTOMIZED "adaptation.conf", 
            #CUSTOMIZED "dns.conf", 
            #CUSTOMIZED "miscellaneous.conf"
        ]

        for section in sections:
            self.generate_template("squid/conf/" + section, os.path.join(target_dir, section))

    def generate_config_auth(self, target_dir):

        name    = "authentication.conf"
        context = { 
            "ncsa_exe"    : BinaryBasicNcsaAuth.full_path(),
            "auth_exe"    : BinaryNegotiateWrapperAuth.full_path(),
            "krb5_exe"    : BinaryNegotiateKerberosAuth.full_path(),
            "ldap_exe"    : BinaryBasicLdapAuth.full_path(),
            "radius_exe"  : BinaryBasicRadiusAuth.full_path(),
            "acldefault"  : AclDefault.objects.first(),
            "authlocaldb" : AuthLocalDb.objects.first(),
            "authad"      : AuthAd.objects.first(),
            "authradius"  : AuthRadius.objects.first()
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_acls(self, target_dir):

        name    = "access_controls.conf"
        context = { 
            "acldefault"   : AclDefault.objects.first(),
            "authlocaldb"  : AuthLocalDb.objects.first(),
            "authad"       : AuthAd.objects.first(),
            "authradius"   : AuthRadius.objects.first(),
            "network"      : Network.objects.first(),
            "authpseudoad" : AuthPseudoAd.objects.first()
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_network(self, target_dir):

        name    = "network.conf"
        context = { 
            "network" : Network.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_ssl(self, target_dir):

        # first ssl
        name    = "ssl.conf"
        context = { 
            "bumpmode" : BumpMode.objects.first(), 
            "foreign_intermediate_certs" : SslIntermediateCert.objects.all() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

        # now sslcrtd
        name     = "sslcrtd.conf"
        context  = { 
            "sslcrtd_exe" : BinarySslCrtd.full_path(), 
            "sslcrtd_dir" : BinarySslCrtd.get_dir() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_cache(self, target_dir):

        # first memory cache
        name    = "memory_cache.conf"
        context = { 
            "memory_cache" : MemoryCache.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

        # now disk cache
        name    = "disk_cache.conf"
        context = { 
            "disk_cache" : DiskCache.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )        

        # ok generate cache tuning
        name    = "cache_tuning.conf"
        context = { 
            "auth_enabled" : is_auth_enabled() ,
            "patterns"     : RefreshPattern.objects.all()
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        ) 

    def generate_config_troubleshooting(self, target_dir):

        # get the object
        troubleshooting = TroubleShooting.objects.first()

        # current section_all value
        level_all = troubleshooting.loglevel_section_all

        # construct collection of sections (collect ONLY if different from all)
        sections = []
        for section in LogSection.objects.all():
            if section.level != level_all:
                sections.append( (section.section_id, section.level) )

        # and generate the file
        name    = "troubleshooting.conf"
        context = { 
            "troubleshooting" : troubleshooting, 
            "sections" : sections 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_url_rewriting(self, target_dir):

        # get the object
        safe_browsing = SafeBrowsing.objects.first()

        # and generate the file
        name    = "url_rewriting.conf"
        context = { 
            "safe_browsing" : safe_browsing
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_administrative(self, target_dir):

        name    = "administrative.conf"
        context = { 
            "administrative" : Administrative.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_wccp(self, target_dir):

        name    = "wccp.conf"
        context = { 
            "network" : Network.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_dns(self, target_dir):

        name    = "dns.conf"
        context = { 
            "dns" : Dns.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_icap(self, target_dir):

        name    = "icap.conf"
        context = { 
            "websafety" : WebSafetyNetwork.objects.first(), 
            "antivirus" : AvSettings.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_ecap(self, target_dir):

        # first icap
        name    = "ecap.conf"
        context = { 
            "antivirus" : AvSettings.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_adaptation(self, target_dir):

        name = "adaptation.conf"
        context = {
            "websafety" : WebSafetyNetwork.objects.first(), 
            "antivirus" : AvSettings.objects.first(), 
            "authlabel" : AuthLabel.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def generate_config_miscellaneous(self, target_dir):

        name    = "miscellaneous.conf"
        context = { 
            "miscellaneous" : Miscellaneous.objects.first() 
        }

        self.generate_template_with_context(
            os.path.join("squid/conf/", name),
            os.path.join(target_dir, name),
            context
        )

    def write_auth(self, new_dir):

        # create writer and dumper
        w = FileWriter(new_dir)        
        d = JsonDumper()

        # write auth jsons
        self.generate_auth(w, d)

    def generate_auth(self, writer, dumper):

        # write auth domain
        o = AuthAd.objects.first()
        d = {
            "realm"     : o.realm,
            "base_dn"   : o.base_dn, 
            "bind_pass" : o.bind_pass, 
            "bind_user" : o.bind_user, 
            "dc1addr"   : o.dc1addr,
            "dc2addr"   : o.dc2addr,
            "dc1port"   : o.lookup_mode,    # lookup mode is actually a port (389, 636, 3268 or 3269)
            "dc2port"   : o.lookup_mode     # same as above
        }

        writer.write('auth_domain.json', dumper.dumps(d))

        # write group membership
        d = {
            "cache_time" : o.cachetime,
            "timeout"   : o.timeout
        }
        writer.write('auth_group_membership.json', dumper.dumps(d))

    def write_auth_labels(self, new_dir):

        # create writer and dumper
        w = FileWriter(new_dir)        
        d = JsonDumper()

        # write auth jsons
        self.generate_auth_labels(w, d)

    def generate_auth_labels(self, writer, dumper):

        # write auth labels
        labels = []
        for o in AuthLabelUsers.objects.all():
            labels.append({
                "user_name": o.user_name,
                "user_ip"  : o.user_ip,
                "user_eui" : o.user_mac,
                "comment"  : o.comment
            })

        # write auth label settings
        label = AuthLabel.objects.first()
        data  = {
            "labels" : labels,
            "enable" : label.enable,
            "resolve_ip_as_user_name": label.resolve_ip_as_user_name
        }

        writer.write('auth_labels.json', dumper.dumps(data))

    def generate_authentication_items(self, new_dir):

        # construct the folder
        dir_name = os.path.join(new_dir, "authentication", "exclude")

        # empty it
        self.recreate_dir(dir_name)

        # dump all lists
        files = [
            ('domain_name.conf',    ExcludeDomainName),
            ('domain_ip.conf',      ExcludeDomainIp),
            ('domain_subnet.conf',  ExcludeDomainSubnet),
            ('domain_range.conf',   ExcludeDomainRange),
            ('user_ip.conf',        ExcludeUserIp),
            ('user_subnet.conf',    ExcludeUserSubnet),
            ('user_range.conf',     ExcludeUserRange),
            ('user_agent.conf',     ExcludeUserAgent),
            ('schedule.conf',       ExcludeSchedule),
        ]
        for (n,m) in files:

            # get the objects with bypass_auth
            objects = m.objects.filter(bypass_auth=True)

            # and write them
            ConfFileWriter().write(dir_name, n, objects)

        # dump the advanced object (note how we make an array of it)
        ConfFileWriterAdvanced().write(dir_name, 'advanced.conf', ExcludeAdvanced.objects.first().value_auth)

        # now dump the include file
        self.generate_template("squid/conf/authentication/exclude.conf", os.path.join(new_dir, "authentication" , "exclude.conf"))

    def generate_adaptation_items(self, new_dir):

        # construct the folder
        dir_name = os.path.join(new_dir, "adaptation", "exclude")

        # empty it
        self.recreate_dir(dir_name)

        # dump all lists
        files = [
            ('domain_name.conf',    ExcludeDomainName),
            ('domain_ip.conf',      ExcludeDomainIp),
            ('domain_subnet.conf',  ExcludeDomainSubnet),
            ('domain_range.conf',   ExcludeDomainRange),
            ('user_ip.conf',        ExcludeUserIp),
            ('user_subnet.conf',    ExcludeUserSubnet),
            ('user_range.conf',     ExcludeUserRange),
            ('user_agent.conf',     ExcludeUserAgent),
            ('content_type.conf',   ExcludeContentType),
            ('schedule.conf',       ExcludeSchedule),
        ]
        for (n,m) in files:
            ConfFileWriter().write(dir_name, n, m.objects.filter(bypass_adaptation=True))

        # dump the advanced object (note how we make an array of it)
        ConfFileWriterAdvanced().write(dir_name, 'advanced.conf', ExcludeAdvanced.objects.first().value_adaptation )


    def generate_cache_items(self, new_dir):

        # construct the folder
        dir_name = os.path.join(new_dir, "cache", "exclude")

        # empty it
        self.recreate_dir(dir_name)

        # dump all lists
        files = [
            ('domain_name.conf',    ExcludeDomainName),
            ('domain_ip.conf',      ExcludeDomainIp),
            ('domain_subnet.conf',  ExcludeDomainSubnet),
            ('domain_range.conf',   ExcludeDomainRange),
            ('user_name.conf',      ExcludeUserName),
            ('user_ip.conf',        ExcludeUserIp),
            ('user_subnet.conf',    ExcludeUserSubnet),
            ('user_range.conf',     ExcludeUserRange),
            ('user_agent.conf',     ExcludeUserAgent),
            ('content_type.conf',   ExcludeContentType),
            ('schedule.conf',       ExcludeSchedule),
        ]
        for (n,m) in files:
            ConfFileWriter().write(dir_name, n, m.objects.filter(bypass_cache=True))

        # dump the advanced object (note how we make an array of it)
        ConfFileWriterAdvanced().write(dir_name, 'advanced.conf', ExcludeAdvanced.objects.first().value_cache)

    def generate_urlrewrite_items(self, new_dir):

        # construct the folder
        dir_name = os.path.join(new_dir, "urlrewrite", "exclude")

        # empty it
        self.recreate_dir(dir_name)

        # dump all lists
        files = [
            ('domain_name.conf',    ExcludeDomainName),
            ('domain_ip.conf',      ExcludeDomainIp),
            ('domain_subnet.conf',  ExcludeDomainSubnet),
            ('domain_range.conf',   ExcludeDomainRange),
            ('user_name.conf',      ExcludeUserName),
            ('user_ip.conf',        ExcludeUserIp),
            ('user_subnet.conf',    ExcludeUserSubnet),
            ('user_range.conf',     ExcludeUserRange),
            ('user_agent.conf',     ExcludeUserAgent),
            ('schedule.conf',       ExcludeSchedule),
        ]
        for (n,m) in files:
            ConfFileWriter().write(dir_name, n, m.objects.filter(bypass_urlrewrite=True))

        # dump the advanced object (note how we make an array of it)
        ConfFileWriterAdvanced().write(dir_name, 'advanced.conf', ExcludeAdvanced.objects.first().value_urlrewrite)

    def generate_ssl_items(self, new_dir):

        # construct the folder
        dir_name1 = os.path.join(new_dir, "ssl", "exclude")
        dir_name2 = os.path.join(new_dir, "ssl", "target")
        dir_name3 = os.path.join(new_dir, "ssl", "error")

        # empty it
        self.recreate_dir(dir_name1)
        self.recreate_dir(dir_name2)
        self.recreate_dir(dir_name3)
        
        # dump ssl exclusions
        files = [
            (dir_name1, 'domains.conf', ExcludeDomainName),
            (dir_name1, 'ips.conf',     ExcludeDomainIp),
            (dir_name1, 'subnets.conf', ExcludeDomainSubnet),
        ]
        for (d, n, m) in files:
            ConfFileWriter().write(d, n, m.objects.filter(bypass_sslbump=True))

        # dump other ssl items
        files = [
            (dir_name2, 'domains.conf',   SslTargetDomain.objects),
            (dir_name2, 'ips.conf',       SslTargetIp.objects),
            (dir_name2, 'subnets.conf',   SslTargetSubnet.objects),
            (dir_name3, 'domains.conf',   SslErrorDomain.objects),
            (dir_name3, 'ips.conf',       SslErrorIp.objects),
            (dir_name3, 'subnets.conf',   SslErrorSubnet.objects),

        ]
        for (d, n,s) in files:        
            ConfFileWriter().write(d, n, s.all())

        # dump the advanced exclude object
        ConfFileWriterAdvanced().write(dir_name1, 'advanced.conf', ExcludeAdvanced.objects.first().value_sslbump )

    def generate_ssl_intermediate_certs(self, new_dir):

        # construct the path
        path = os.path.join(new_dir, "foreign_intermediate_certs.pem")

        # open the file and write certificates one by one
        with open(path, "wb") as fout:

            items = SslIntermediateCert.objects.all()
            for item in items:
                if len(item.pem) > 0:
                    fout.write(item.pem)
                    fout.write("\n")


    def generate_template(self, template, file):

        c = {}
        self.generate_template_with_context(template, file, c)

    def generate_template_with_context(self, template, file, context):

        with open(file, "wb") as fout:
            fout.write(loader.get_template(template).render(context))

    #
    #
    def recreate_dir(self, dir_name):
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
        os.makedirs(dir_name)

