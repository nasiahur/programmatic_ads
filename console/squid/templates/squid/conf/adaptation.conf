# -----------------------------------------------------------------------------
# MESSAGE ADAPTATION OPTIONS
# -----------------------------------------------------------------------------

#  TAG: adaptation_service_set
#
#	Configures an ordered set of similar, redundant services. This is
#	useful when hot standby or backup adaptation servers are available.
#
#	    adaptation_service_set set_name service_name1 service_name2 ...
#
# 	The named services are used in the set declaration order. The first
#	applicable adaptation service from the set is used first. The next
#	applicable service is tried if and only if the transaction with the
#	previous service fails and the message waiting to be adapted is still
#	intact.
#
#	When adaptation starts, broken services are ignored as if they were
#	not a part of the set. A broken service is a down optional service.
#
#	The services in a set must be attached to the same vectoring point
#	(e.g., pre-cache) and use the same adaptation method (e.g., REQMOD).
#
#	If all services in a set are optional then adaptation failures are
#	bypassable. If all services in the set are essential, then a
#	transaction failure with one service may still be retried using
#	another service from the set, but when all services fail, the master
#	transaction fails as well.
#
#	A set may contain a mix of optional and essential services, but that
#	is likely to lead to surprising results because broken services become
#	ignored (see above), making previously bypassable failures fatal.
#	Technically, it is the bypassability of the last failed service that
#	matters.
#
#	See also: adaptation_access adaptation_service_chain
#
#Example:
#adaptation_service_set svcBlocker urlFilterPrimary urlFilterBackup
#adaptation service_set svcLogger loggerLocal loggerRemote
#Default:
# none

#  TAG: adaptation_service_chain
#
#	Configures a list of complementary services that will be applied
#	one-by-one, forming an adaptation chain or pipeline. This is useful
#	when Squid must perform different adaptations on the same message.
#
#	    adaptation_service_chain chain_name service_name1 svc_name2 ...
#
# 	The named services are used in the chain declaration order. The first
#	applicable adaptation service from the chain is used first. The next
#	applicable service is applied to the successful adaptation results of
#	the previous service in the chain.
#
#	When adaptation starts, broken services are ignored as if they were
#	not a part of the chain. A broken service is a down optional service.
#
#	Request satisfaction terminates the adaptation chain because Squid
#	does not currently allow declaration of RESPMOD services at the
#	"reqmod_precache" vectoring point (see icap_service or ecap_service).
#
#	The services in a chain must be attached to the same vectoring point
#	(e.g., pre-cache) and use the same adaptation method (e.g., REQMOD).
#
#	A chain may contain a mix of optional and essential services. If an
#	essential adaptation fails (or the failure cannot be bypassed for
#	other reasons), the master transaction fails. Otherwise, the failure
#	is bypassed as if the failed adaptation service was not in the chain.
#
#	See also: adaptation_access adaptation_service_set
#
#Example:
#adaptation_service_chain svcRequest requestLogger urlFilter leakDetector
#Default:
# none

#
# global trust acls - objects matching these acls are NEVER checked by web filter or antivirus
#

# by destination name or IP
acl ws_exclude_domainname dstdomain "/opt/websafety/etc/squid/adaptation/exclude/domain_name.conf"
acl ws_exclude_domainaddr dst       "/opt/websafety/etc/squid/adaptation/exclude/domain_ip.conf"    
acl ws_exclude_domainaddr dst       "/opt/websafety/etc/squid/adaptation/exclude/domain_subnet.conf"    
acl ws_exclude_domainaddr dst       "/opt/websafety/etc/squid/adaptation/exclude/domain_range.conf"    

# by source IP
acl ws_exclude_useraddr src "/opt/websafety/etc/squid/adaptation/exclude/user_ip.conf"    
acl ws_exclude_useraddr src "/opt/websafety/etc/squid/adaptation/exclude/user_subnet.conf"    
acl ws_exclude_useraddr src "/opt/websafety/etc/squid/adaptation/exclude/user_range.conf"    

# other types
acl ws_exclude_useragent   browser -i    "/opt/websafety/etc/squid/adaptation/exclude/user_agent.conf"    
acl ws_exclude_contenttype rep_mime_type "/opt/websafety/etc/squid/adaptation/exclude/content_type.conf"    
acl ws_exclude_schedule    time          "/opt/websafety/etc/squid/adaptation/exclude/schedule.conf"    

# by default connections within localnet should NOT be web filtered
acl ws_bypass_to_localnet dst 10.0.0.0/8      # RFC1918 possible internal network
acl ws_bypass_to_localnet dst 172.16.0.0/12   # RFC1918 possible internal network
acl ws_bypass_to_localnet dst 192.168.0.0/16  # RFC1918 possible internal network

#
# we need to build chains ONLY if we have both web filter and antivirus enabled
#
{% if websafety.enable_icap %}	

	# web safety is enabled, see if antivirus is enabled too
	{% if antivirus.enable %}

		# antivirus is enabled, see what antivirus
		{% if antivirus.av_type == 0 %}		
			
			# build web filter -> ecap av chain
			adaptation_service_chain chain1 websafety1 ecap_av1
			adaptation_service_chain chain2 websafety2 ecap_av2

		{% else %}		

			# build web filter -> icap av chain
			adaptation_service_chain chain1 websafety1 icap_av1
			adaptation_service_chain chain2 websafety2 icap_av2

		{% endif %}

		{% if websafety.bypass_to_localnet %}
			adaptation_access chain1 deny ws_bypass_to_localnet
			adaptation_access chain2 deny ws_bypass_to_localnet
		{% endif %}

		adaptation_access chain1 deny ws_exclude_domainname
		adaptation_access chain2 deny ws_exclude_domainname	
		adaptation_access chain1 deny ws_exclude_domainaddr
		adaptation_access chain2 deny ws_exclude_domainaddr
		adaptation_access chain1 deny ws_exclude_useraddr
		adaptation_access chain2 deny ws_exclude_useraddr

		adaptation_access chain1 deny ws_exclude_useragent
		adaptation_access chain2 deny ws_exclude_useragent

		# content type is only applicable on responses
		adaptation_access chain2 deny ws_exclude_contenttype

		adaptation_access chain1 deny ws_exclude_schedule
		adaptation_access chain2 deny ws_exclude_schedule

		# exclude by advanced acls
		include "/opt/websafety/etc/squid/adaptation/exclude/advanced.conf"

		# and direct all traffic into chain
		adaptation_access chain1 allow all
		adaptation_access chain2 allow all

	{% else %}

		# antivirus is NOT enabled, no need to chain, just use web safety services
		{% if websafety.bypass_to_localnet %}
			adaptation_access websafety1 deny ws_bypass_to_localnet
			adaptation_access websafety2 deny ws_bypass_to_localnet
		{% endif %}

		adaptation_access websafety1 deny ws_exclude_domainname
		adaptation_access websafety2 deny ws_exclude_domainname	
		adaptation_access websafety1 deny ws_exclude_domainaddr
		adaptation_access websafety2 deny ws_exclude_domainaddr
		adaptation_access websafety1 deny ws_exclude_useraddr
		adaptation_access websafety2 deny ws_exclude_useraddr

		adaptation_access websafety1 deny ws_exclude_useragent
		adaptation_access websafety2 deny ws_exclude_useragent

		# content type is only applicable on responses
		adaptation_access websafety2 deny ws_exclude_contenttype

		adaptation_access websafety1 deny ws_exclude_schedule
		adaptation_access websafety2 deny ws_exclude_schedule

		# exclude by advanced acls
		include "/opt/websafety/etc/squid/adaptation/exclude/advanced.conf"

		# everything else is filtered
		adaptation_access websafety1 allow all
		adaptation_access websafety2 allow all

	{% endif %}
	
{% else %}

	# web safety is disabled, see what antivirus is enabled
	{% if antivirus.av_type == 0 %}		

		{% if websafety.bypass_to_localnet %}
			adaptation_access ecap_av1 deny ws_bypass_to_localnet
			adaptation_access ecap_av2 deny ws_bypass_to_localnet
		{% endif %}

		adaptation_access ecap_av1 deny ws_exclude_domainname
		adaptation_access ecap_av2 deny ws_exclude_domainname	
		adaptation_access ecap_av1 deny ws_exclude_domainaddr
		adaptation_access ecap_av2 deny ws_exclude_domainaddr
		adaptation_access ecap_av1 deny ws_exclude_useraddr
		adaptation_access ecap_av2 deny ws_exclude_useraddr

		adaptation_access ecap_av1 deny ws_exclude_useragent
		adaptation_access ecap_av2 deny ws_exclude_useragent

		# content type is only applicable on responses
		adaptation_access ecap_av2 deny ws_exclude_contenttype

		adaptation_access ecap_av1 deny ws_exclude_schedule
		adaptation_access ecap_av2 deny ws_exclude_schedule

		# exclude by advanced acls
		include "/opt/websafety/etc/squid/adaptation/exclude/advanced.conf"
			
		# use ecap antivirus
		adaptation_access ecap_av1 allow all
		adaptation_access ecap_av2 allow all

	{% else %}	

		{% if websafety.bypass_to_localnet %}
			adaptation_access icap_av1 deny ws_bypass_to_localnet
			adaptation_access icap_av2 deny ws_bypass_to_localnet
		{% endif %}

		adaptation_access icap_av1 deny ws_exclude_domainname
		adaptation_access icap_av2 deny ws_exclude_domainname	
		adaptation_access icap_av1 deny ws_exclude_domainaddr
		adaptation_access icap_av2 deny ws_exclude_domainaddr
		adaptation_access icap_av1 deny ws_exclude_useraddr
		adaptation_access icap_av2 deny ws_exclude_useraddr

		adaptation_access icap_av1 deny ws_exclude_useragent
		adaptation_access icap_av2 deny ws_exclude_useragent

		# content type is only applicable on responses
		adaptation_access icap_av2 deny ws_exclude_contenttype

		adaptation_access icap_av1 deny ws_exclude_schedule
		adaptation_access icap_av2 deny ws_exclude_schedule

		# exclude by advanced acls
		include "/opt/websafety/etc/squid/adaptation/exclude/advanced.conf"	

		# use icap antivirus
		adaptation_access icap_av1 allow all
		adaptation_access icap_av2 allow all

	{% endif %}

{% endif %}

#  TAG: adaptation_access
#	Sends an HTTP transaction to an ICAP or eCAP adaptation	service.
#
#	adaptation_access service_name allow|deny [!]aclname...
#	adaptation_access set_name     allow|deny [!]aclname...
#
#	At each supported vectoring point, the adaptation_access
#	statements are processed in the order they appear in this
#	configuration file. Statements pointing to the following services
#	are ignored (i.e., skipped without checking their ACL):
#
#	    - services serving different vectoring points
#	    - "broken-but-bypassable" services
#	    - "up" services configured to ignore such transactions
#              (e.g., based on the ICAP Transfer-Ignore header).
#
#        When a set_name is used, all services in the set are checked
#	using the same rules, to find the first applicable one. See
#	adaptation_service_set for details.
#
#	If an access list is checked and there is a match, the
#	processing stops: For an "allow" rule, the corresponding
#	adaptation service is used for the transaction. For a "deny"
#	rule, no adaptation service is activated.
#
#	It is currently not possible to apply more than one adaptation
#	service at the same vectoring point to the same HTTP transaction.
#
#        See also: icap_service and ecap_service
#
#Example:
#adaptation_access service_1 allow all
#Default:
# Allow, unless rules exist in squid.conf.

#  TAG: adaptation_service_iteration_limit
#	Limits the number of iterations allowed when applying adaptation
#	services to a message. If your longest adaptation set or chain
#	may have more than 16 services, increase the limit beyond its
#	default value of 16. If detecting infinite iteration loops sooner
#	is critical, make the iteration limit match the actual number
#	of services in your longest adaptation set or chain.
#
#	Infinite adaptation loops are most likely with routing services.
#
#	See also: icap_service routing=1
#Default:
# adaptation_service_iteration_limit 16

#  TAG: adaptation_masterx_shared_names
#	For each master transaction (i.e., the HTTP request and response
#	sequence, including all related ICAP and eCAP exchanges), Squid
#	maintains a table of metadata. The table entries are (name, value)
#	pairs shared among eCAP and ICAP exchanges. The table is destroyed
#	with the master transaction.
#
#	This option specifies the table entry names that Squid must accept
#	from and forward to the adaptation transactions.
#
#	An ICAP REQMOD or RESPMOD transaction may set an entry in the 
#	shared table by returning an ICAP header field with a name 
#	specified in adaptation_masterx_shared_names.
#
#	An eCAP REQMOD or RESPMOD transaction may set an entry in the
#	shared table by implementing the libecap::visitEachOption() API
#	to provide an option with a name specified in
#	adaptation_masterx_shared_names.
#
#	Squid will store and forward the set entry to subsequent adaptation
#	transactions within the same master transaction scope.
#
#	Only one shared entry name is supported at this time.
#
#Example:
## share authentication information among ICAP services
#adaptation_masterx_shared_names X-Subscriber-ID
#Default:
# none

#  TAG: adaptation_meta
#	This option allows Squid administrator to add custom ICAP request
#	headers or eCAP options to Squid ICAP requests or eCAP transactions.
#	Use it to pass custom authentication tokens and other
#	transaction-state related meta information to an ICAP/eCAP service.
#	
#	The addition of a meta header is ACL-driven:
#		adaptation_meta name value [!]aclname ...
#	
#	Processing for a given header name stops after the first ACL list match.
#	Thus, it is impossible to add two headers with the same name. If no ACL
#	lists match for a given header name, no such header is added. For 
#	example:
#	
#		# do not debug transactions except for those that need debugging
#		adaptation_meta X-Debug 1 needs_debugging
#	
#		# log all transactions except for those that must remain secret
#		adaptation_meta X-Log 1 !keep_secret
#	
#		# mark transactions from users in the "G 1" group
#		adaptation_meta X-Authenticated-Groups "G 1" authed_as_G1
#	
#	The "value" parameter may be a regular squid.conf token or a "double
#	quoted string". Within the quoted string, use backslash (\) to escape
#	any character, which is currently only useful for escaping backslashes
#	and double quotes. For example,
#	    "this string has one backslash (\\) and two \"quotes\""
#
#	Used adaptation_meta header values may be logged via %note
#	logformat code. If multiple adaptation_meta headers with the same name
#	are used during master transaction lifetime, the header values are
#	logged in the order they were used and duplicate values are ignored
#	(only the first repeated value will be logged).
#Default:

# pass the client EUI (MAC) address to ICAP server in case we have enabled user labelling by EUI(MAC) or IP
{% if authlabel.enable %}
adaptation_meta X-Client-EUI "%>eui" all
{% endif %}


#  TAG: icap_retry
#	This ACL determines which retriable ICAP transactions are
#	retried. Transactions that received a complete ICAP response
#	and did not have to consume or produce HTTP bodies to receive
#	that response are usually retriable.
#
#	icap_retry allow|deny [!]aclname ...
#
#	Squid automatically retries some ICAP I/O timeouts and errors
#	due to persistent connection race conditions.
#
#	See also: icap_retry_limit
#Default:
# icap_retry deny all

#  TAG: icap_retry_limit
#	Limits the number of retries allowed.
#
#	Communication errors due to persistent connection race
#	conditions are unavoidable, automatically retried, and do not
#	count against this limit.
#
#	See also: icap_retry
#Default:
# No retries are allowed.