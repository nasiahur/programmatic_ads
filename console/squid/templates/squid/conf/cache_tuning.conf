
# OPTIONS FOR TUNING THE CACHE
# -----------------------------------------------------------------------------

#  TAG: cache
#	Requests denied by this directive will not be served from the cache
#	and their responses will not be stored in the cache. This directive
#	has no effect on other transactions and on already cached responses.
#
#	This clause supports both fast and slow acl types.
#	See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
#
#	This and the two other similar caching directives listed below are
#	checked at different transaction processing stages, have different
#	access to response information, affect different cache operations,
#	and differ in slow ACLs support:
#
#	* cache: Checked before Squid makes a hit/miss determination.
#		No access to reply information!
#		Denies both serving a hit and storing a miss.
#		Supports both fast and slow ACLs.
#	* send_hit: Checked after a hit was detected.
#		Has access to reply (hit) information.
#		Denies serving a hit only.
#		Supports fast ACLs only.
#	* store_miss: Checked before storing a cachable miss.
#		Has access to reply (miss) information.
#		Denies storing a miss only.
#		Supports fast ACLs only.
#
#	If you are not sure which of the three directives to use, apply the
#	following decision logic:
#
#	* If your ACL(s) are of slow type _and_ need response info, redesign.
#	  Squid does not support that particular combination at this time.
#        Otherwise:
#	* If your directive ACL(s) are of slow type, use "cache"; and/or
#	* if your directive ACL(s) need no response info, use "cache".
#        Otherwise:
#	* If you do not want the response cached, use store_miss; and/or
#	* if you do not want a hit on a cached response, use send_hit.
#Default:
# By default, this directive is unused and has no effect.

#
# cache exclusions - by destination name or IP
#
acl cache_exclude_domainname dstdomain "/opt/websafety/etc/squid/cache/exclude/domain_name.conf"
acl cache_exclude_domainaddr dst       "/opt/websafety/etc/squid/cache/exclude/domain_ip.conf"    
acl cache_exclude_domainaddr dst       "/opt/websafety/etc/squid/cache/exclude/domain_subnet.conf"    
acl cache_exclude_domainaddr dst       "/opt/websafety/etc/squid/cache/exclude/domain_range.conf"    

#
# cache exclusions - by source IP
#
acl cache_exclude_useraddr src "/opt/websafety/etc/squid/cache/exclude/user_ip.conf"    
acl cache_exclude_useraddr src "/opt/websafety/etc/squid/cache/exclude/user_subnet.conf"    
acl cache_exclude_useraddr src "/opt/websafety/etc/squid/cache/exclude/user_range.conf"    

#
# cache exclusions - other types
#
acl cache_exclude_useragent   browser -i    "/opt/websafety/etc/squid/cache/exclude/user_agent.conf"    
acl cache_exclude_schedule    time          "/opt/websafety/etc/squid/cache/exclude/schedule.conf"    

# ok deny all requests above
cache deny cache_exclude_domainname
cache deny cache_exclude_domainaddr
cache deny cache_exclude_useraddr
cache deny cache_exclude_useragent
cache deny cache_exclude_schedule

#
# NO EXCLUSION BY USER NAME FOR NOW
# cache exclusions - by user name (only generated *if* user authentication is setup!)
#
# {% if auth_enabled %}
# acl cache_exclude_username proxy_auth "/opt/websafety/etc/squid/cache/exclude/user_name.conf"    
# cache deny cache_exclude_username
# {%else%}
# no proxy authentication configured - exclusions from caching by user name is not possible (generation skipped)
# {% endif %}

# simply add the advanced config
include "/opt/websafety/etc/squid/cache/exclude/advanced.conf"    

#
# cache exclusions by content-type (used in store_miss *and* send_hit - because content type is ONLY present in responses!)
#
acl cache_exclude_contenttype rep_mime_type "/opt/websafety/etc/squid/cache/exclude/content_type.conf"

#  TAG: send_hit
#	Responses denied by this directive will not be served from the cache
#	(but may still be cached, see store_miss). This directive has no
#	effect on the responses it allows and on the cached objects.
#
#	Please see the "cache" directive for a summary of differences among
#	store_miss, send_hit, and cache directives.
#
#	Unlike the "cache" directive, send_hit only supports fast acl
#	types.  See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
#
#	For example:
#
#		# apply custom Store ID mapping to some URLs
#		acl MapMe dstdomain .c.example.com
#		store_id_program ...
#		store_id_access allow MapMe
#
#		# but prevent caching of special responses
#		# such as 302 redirects that cause StoreID loops
#		acl Ordinary http_status 200-299
#		store_miss deny MapMe !Ordinary
#
#		# and do not serve any previously stored special responses
#		# from the cache (in case they were already cached before
#		# the above store_miss rule was in effect).
#		send_hit deny MapMe !Ordinary
#Default:
# By default, this directive is unused and has no effect.

# never send a possibly cached response with this content type (works together with store_miss)
send_hit deny cache_exclude_contenttype


#  TAG: store_miss
#	Responses denied by this directive will not be cached (but may still
#	be served from the cache, see send_hit). This directive has no
#	effect on the responses it allows and on the already cached responses.
#
#	Please see the "cache" directive for a summary of differences among
#	store_miss, send_hit, and cache directives. See the
#	send_hit directive for a usage example.
#
#	Unlike the "cache" directive, store_miss only supports fast acl
#	types.  See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
#Default:
# By default, this directive is unused and has no effect.

# no caching for these content types
store_miss deny cache_exclude_contenttype

#  TAG: max_stale	time-units
#	This option puts an upper limit on how stale content Squid
#	will serve from the cache if cache validation fails.
#	Can be overriden by the refresh_pattern max-stale option.
#Default:
# max_stale 1 week

#  TAG: refresh_pattern
#	usage: refresh_pattern [-i] regex min percent max [options]
#
#	By default, regular expressions are CASE-SENSITIVE.  To make
#	them case-insensitive, use the -i option.
#
#	'Min' is the time (in minutes) an object without an explicit
#	expiry time should be considered fresh. The recommended
#	value is 0, any higher values may cause dynamic applications
#	to be erroneously cached unless the application designer
#	has taken the appropriate actions.
#
#	'Percent' is a percentage of the objects age (time since last
#	modification age) an object without explicit expiry time
#	will be considered fresh.
#
#	'Max' is an upper limit on how long objects without an explicit
#	expiry time will be considered fresh.
#
#	options: override-expire
#		 override-lastmod
#		 reload-into-ims
#		 ignore-reload
#		 ignore-no-store
#		 ignore-must-revalidate
#		 ignore-private
#		 ignore-auth
#		 max-stale=NN
#		 refresh-ims
#		 store-stale
#
#		override-expire enforces min age even if the server
#		sent an explicit expiry time (e.g., with the
#		Expires: header or Cache-Control: max-age). Doing this
#		VIOLATES the HTTP standard.  Enabling this feature
#		could make you liable for problems which it causes.
#
#		Note: override-expire does not enforce staleness - it only extends
#		freshness / min. If the server returns a Expires time which
#		is longer than your max time, Squid will still consider
#		the object fresh for that period of time.
#
#		override-lastmod enforces min age even on objects
#		that were modified recently.
#
#		reload-into-ims changes a client no-cache or ``reload''
#		request for a cached entry into a conditional request using
#		If-Modified-Since and/or If-None-Match headers, provided the
#		cached entry has a Last-Modified and/or a strong ETag header.
#		Doing this VIOLATES the HTTP standard. Enabling this feature
#		could make you liable for problems which it causes.
#
#		ignore-reload ignores a client no-cache or ``reload''
#		header. Doing this VIOLATES the HTTP standard. Enabling
#		this feature could make you liable for problems which
#		it causes.
#
#		ignore-no-store ignores any ``Cache-control: no-store''
#		headers received from a server. Doing this VIOLATES
#		the HTTP standard. Enabling this feature could make you
#		liable for problems which it causes.
#
#		ignore-must-revalidate ignores any ``Cache-Control: must-revalidate``
#		headers received from a server. Doing this VIOLATES
#		the HTTP standard. Enabling this feature could make you
#		liable for problems which it causes.
#
#		ignore-private ignores any ``Cache-control: private''
#		headers received from a server. Doing this VIOLATES
#		the HTTP standard. Enabling this feature could make you
#		liable for problems which it causes.
#
#		ignore-auth caches responses to requests with authorization,
#		as if the originserver had sent ``Cache-control: public''
#		in the response header. Doing this VIOLATES the HTTP standard.
#		Enabling this feature could make you liable for problems which
#		it causes.
#
#		refresh-ims causes squid to contact the origin server
#		when a client issues an If-Modified-Since request. This
#		ensures that the client will receive an updated version
#		if one is available.
#
#		store-stale stores responses even if they don't have explicit 
#		freshness or a validator (i.e., Last-Modified or an ETag) 
#		present, or if they're already stale. By default, Squid will 
#		not cache such responses because they usually can't be
#		reused. Note that such responses will be stale by default.
#
#		max-stale=NN provide a maximum staleness factor. Squid won't
#		serve objects more stale than this even if it failed to
#		validate the object. Default: use the max_stale global limit.
#
#	Basically a cached object is:
#
#		FRESH if expire > now, else STALE
#		STALE if age > max
#		FRESH if lm-factor < percent, else STALE
#		FRESH if age < min
#		else STALE
#
#	The refresh_pattern lines are checked in the order listed here.
#	The first entry which matches is used.  If none of the entries
#	match the default will be used.
#
#	Note, you must uncomment all the default lines if you want
#	to change one. The default setting is only active if none is
#	used.
#
#
{% for pattern in patterns %}
refresh_pattern {{pattern.regex}} {% if pattern.insensitive %}-i{%endif%} {{pattern.min_time}} {{pattern.percent}}% {{pattern.max_time}} {{pattern.get_options}}
{% endfor %}

#
# Add any of your own refresh_pattern entries above these.
#
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320

#  TAG: quick_abort_min	(KB)
#Default:
# quick_abort_min 16 KB

#  TAG: quick_abort_max	(KB)
#Default:
# quick_abort_max 16 KB

#  TAG: quick_abort_pct	(percent)
#	The cache by default continues downloading aborted requests
#	which are almost completed (less than 16 KB remaining). This
#	may be undesirable on slow (e.g. SLIP) links and/or very busy
#	caches.  Impatient users may tie up file descriptors and
#	bandwidth by repeatedly requesting and immediately aborting
#	downloads.
#
#	When the user aborts a request, Squid will check the
#	quick_abort values to the amount of data transferred until
#	then.
#
#	If the transfer has less than 'quick_abort_min' KB remaining,
#	it will finish the retrieval.
#
#	If the transfer has more than 'quick_abort_max' KB remaining,
#	it will abort the retrieval.
#
#	If more than 'quick_abort_pct' of the transfer has completed,
#	it will finish the retrieval.
#
#	If you do not want any retrieval to continue after the client
#	has aborted, set both 'quick_abort_min' and 'quick_abort_max'
#	to '0 KB'.
#
#	If you want retrievals to always continue if they are being
#	cached set 'quick_abort_min' to '-1 KB'.
#Default:
# quick_abort_pct 95

#  TAG: read_ahead_gap	buffer-size
#	The amount of data the cache will buffer ahead of what has been
#	sent to the client when retrieving an object from another server.
#Default:
# read_ahead_gap 16 KB

#  TAG: negative_ttl	time-units
#	Set the Default Time-to-Live (TTL) for failed requests.
#	Certain types of failures (such as "connection refused" and
#	"404 Not Found") are able to be negatively-cached for a short time.
#	Modern web servers should provide Expires: header, however if they
#	do not this can provide a minimum TTL.
#	The default is not to cache errors with unknown expiry details.
#
#	Note that this is different from negative caching of DNS lookups.
#
#	WARNING: Doing this VIOLATES the HTTP standard.  Enabling
#	this feature could make you liable for problems which it
#	causes.
#Default:
# negative_ttl 0 seconds

#  TAG: positive_dns_ttl	time-units
#	Upper limit on how long Squid will cache positive DNS responses.
#	Default is 6 hours (360 minutes). This directive must be set
#	larger than negative_dns_ttl.
#Default:
# positive_dns_ttl 6 hours

#  TAG: negative_dns_ttl	time-units
#	Time-to-Live (TTL) for negative caching of failed DNS lookups.
#	This also sets the lower cache limit on positive lookups.
#	Minimum value is 1 second, and it is not recommendable to go
#	much below 10 seconds.
#Default:
# negative_dns_ttl 1 minutes

#  TAG: range_offset_limit	size [acl acl...]
#	usage: (size) [units] [[!]aclname]
#	
#	Sets an upper limit on how far (number of bytes) into the file 
#	a Range request	may be to cause Squid to prefetch the whole file. 
#	If beyond this limit, Squid forwards the Range request as it is and 
#	the result is NOT cached.
#	
#	This is to stop a far ahead range request (lets say start at 17MB)
#	from making Squid fetch the whole object up to that point before
#	sending anything to the client.
#	
#	Multiple range_offset_limit lines may be specified, and they will 
#	be searched from top to bottom on each request until a match is found. 
#	The first match found will be used.  If no line matches a request, the 
#	default limit of 0 bytes will be used.
#	
#	'size' is the limit specified as a number of units.
#	
#	'units' specifies whether to use bytes, KB, MB, etc.
#	If no units are specified bytes are assumed.
#	
#	A size of 0 causes Squid to never fetch more than the
#	client requested. (default)
#	
#	A size of 'none' causes Squid to always fetch the object from the
#	beginning so it may cache the result. (2.0 style)
#	
#	'aclname' is the name of a defined ACL.
#	
#	NP: Using 'none' as the byte value here will override any quick_abort settings 
#	    that may otherwise apply to the range request. The range request will
#	    be fully fetched from start to finish regardless of the client
#	    actions. This affects bandwidth usage.
#Default:
# none

#  TAG: minimum_expiry_time	(seconds)
#	The minimum caching time according to (Expires - Date)
#	headers Squid honors if the object can't be revalidated.
#	The default is 60 seconds.
#
#	In reverse proxy environments it might be desirable to honor
#	shorter object lifetimes. It is most likely better to make
#	your server return a meaningful Last-Modified header however.
#
#	In ESI environments where page fragments often have short
#	lifetimes, this will often be best set to 0.
#Default:
# minimum_expiry_time 60 seconds

#  TAG: store_avg_object_size	(bytes)
#	Average object size, used to estimate number of objects your
#	cache can hold.  The default is 13 KB.
#
#	This is used to pre-seed the cache index memory allocation to
#	reduce expensive reallocate operations while handling clients
#	traffic. Too-large values may result in memory allocation during
#	peak traffic, too-small values will result in wasted memory.
#
#	Check the cache manager 'info' report metrics for the real
#	object sizes seen by your Squid before tuning this.
#Default:
# store_avg_object_size 13 KB

#  TAG: store_objects_per_bucket
#	Target number of objects per bucket in the store hash table.
#	Lowering this value increases the total number of buckets and
#	also the storage maintenance rate.  The default is 20.
#Default:
# store_objects_per_bucket 20