# -----------------------------------------------------------------------------
# eCAP OPTIONS
# -----------------------------------------------------------------------------

#  TAG: ecap_enable on|off
# Note: This option is only available if Squid is rebuilt with the
#       --enable-ecap
#
#   Controls whether eCAP support is enabled.
#Default:
#  off

# enable ecap only if antivirus module is enabled
{% if antivirus.enable and antivirus.av_type == 0 %}
ecap_enable on
{% else %}
ecap_enable off
{% endif %}

#  TAG: ecap_service
# Note: This option is only available if Squid is rebuilt with the
#       --enable-ecap
#
#   Defines a single eCAP service
#
#   ecap_service id vectoring_point uri [option ...]
#
#        id: ID
#       an opaque identifier or name which is used to direct traffic to
#       this specific service. Must be unique among all adaptation
#       services in squid.conf.
#
#   vectoring_point: reqmod_precache|reqmod_postcache|respmod_precache|respmod_postcache
#       This specifies at which point of transaction processing the
#       eCAP service should be activated. *_postcache vectoring points
#       are not yet supported.
#
#   uri: ecap://vendor/service_name?custom&cgi=style&parameters=optional
#       Squid uses the eCAP service URI to match this configuration
#       line with one of the dynamically loaded services. Each loaded
#       eCAP service must have a unique URI. Obtain the right URI from
#       the service provider.
#
#   To activate a service, use the adaptation_access directive. To group
#   services, use adaptation_service_chain and adaptation_service_set.
#
#   Service options are separated by white space. eCAP services support
#   the following name=value options:
#
#   bypass=on|off|1|0
#       If set to 'on' or '1', the eCAP service is treated as optional.
#       If the service cannot be reached or malfunctions, Squid will try
#       to ignore any errors and process the message as if the service
#       was not enabled. No all eCAP errors can be bypassed.
#       If set to 'off' or '0', the eCAP service is treated as essential
#       and all eCAP errors will result in an error page returned to the
#       HTTP client.
#
#                Bypass is off by default: services are treated as essential.
#
#   routing=on|off|1|0
#       If set to 'on' or '1', the eCAP service is allowed to
#       dynamically change the current message adaptation plan by
#       returning a chain of services to be used next.
#
#       Dynamic adaptation plan may cross or cover multiple supported
#       vectoring points in their natural processing order.
#
#       Routing is not allowed by default.
#
#   Older ecap_service format without optional named parameters is
#   deprecated but supported for backward compatibility.
#
#
#Example:
#ecap_service s1 reqmod_precache ecap://filters.R.us/leakDetector?on_error=block bypass=off
#ecap_service s2 respmod_precache ecap://filters.R.us/virusFilter config=/etc/vf.cfg bypass=on
#Default:
# none
{% if antivirus.enable and antivirus.av_type == 0 %}

ecap_service \
	ecap_av1 \
	reqmod_precache \
	ecap://e-cap.org/ecap/services/clamav?mode=REQMOD \
	bypass={% if antivirus.ecap_reqmod_bypass %}on{%else%}off{%endif%} \
	routing=off \
	async={% if antivirus.ecap_clamav_async %}yes{%else%}no{%endif%} \
	message_size_max={{ antivirus.ecap_clamav_message_size_max }} \
	on_error={% if antivirus.ecap_clamav_on_error_action == 0 %}allow{%else%}deny{%endif%} \
	trickling_drop_size={% if not antivirus.ecap_clamav_trickling_enable %}0{% else %}{{antivirus.ecap_clamav_trickling_drop_size}}{% endif %} \
	trickling_period={{antivirus.ecap_clamav_trickling_period}} \
	trickling_size_max={% if antivirus.ecap_clamav_trickling_type == 0 %}0{%elif antivirus.ecap_clamav_trickling_type == 1 %}{{antivirus.ecap_clamav_trickling_size_max}}{%elif antivirus.ecap_clamav_trickling_type == 2 %}none{% endif %} \
	trickling_start_delay={{antivirus.ecap_clamav_trickling_start_delay}}


ecap_service \
	ecap_av2 \
	respmod_precache \
	ecap://e-cap.org/ecap/services/clamav?mode=RESPMOD \
	bypass={% if antivirus.ecap_respmod_bypass %}on{%else%}off{%endif%} \
	routing=off \
	async={% if antivirus.ecap_clamav_async %}yes{%else%}no{%endif%} \
	message_size_max={{ antivirus.ecap_clamav_message_size_max }} \
	on_error={% if antivirus.ecap_clamav_on_error_action == 0 %}allow{%else%}deny{%endif%} \
	trickling_drop_size={% if not antivirus.ecap_clamav_trickling_enable %}0{% else %}{{antivirus.ecap_clamav_trickling_drop_size}}{% endif %} \
	trickling_period={{antivirus.ecap_clamav_trickling_period}} \
	trickling_size_max={% if antivirus.ecap_clamav_trickling_type == 0 %}0{%elif antivirus.ecap_clamav_trickling_type == 1 %}{{antivirus.ecap_clamav_trickling_size_max}}{%elif antivirus.ecap_clamav_trickling_type == 2 %}none{% endif %} \
	trickling_start_delay={{antivirus.ecap_clamav_trickling_start_delay}}

{% endif %}

#  TAG: loadable_modules
#   Instructs Squid to load the specified dynamic module(s) or activate
#   preloaded module(s).
#Example:
#Default:
# none
{% if antivirus.enable and antivirus.av_type == 0 %}
	loadable_modules /usr/local/lib/ecap_clamav_adapter.so
{% endif %}

