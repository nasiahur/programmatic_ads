
# HTTP OPTIONS
# -----------------------------------------------------------------------------

#  TAG: request_header_max_size	(KB)
#	This specifies the maximum size for HTTP headers in a request.
#	Request headers are usually relatively small (about 512 bytes).
#	Placing a limit on the request header size will catch certain
#	bugs (for example with persistent connections) and possibly
#	buffer-overflow or denial-of-service attacks.
#Default:
# request_header_max_size 64 KB

#  TAG: reply_header_max_size	(KB)
#	This specifies the maximum size for HTTP headers in a reply.
#	Reply headers are usually relatively small (about 512 bytes).
#	Placing a limit on the reply header size will catch certain
#	bugs (for example with persistent connections) and possibly
#	buffer-overflow or denial-of-service attacks.
#Default:
# reply_header_max_size 64 KB

#  TAG: request_body_max_size	(bytes)
#	This specifies the maximum size for an HTTP request body.
#	In other words, the maximum size of a PUT/POST request.
#	A user who attempts to send a request with a body larger
#	than this limit receives an "Invalid Request" error message.
#	If you set this parameter to a zero (the default), there will
#	be no limit imposed.
#
#	See also client_request_buffer_max_size for an alternative
#	limitation on client uploads which can be configured.
#Default:
# No limit.

#  TAG: client_request_buffer_max_size	(bytes)
#	This specifies the maximum buffer size of a client request.
#	It prevents squid eating too much memory when somebody uploads
#	a large file.
#Default:
# client_request_buffer_max_size 512 KB

#  TAG: broken_posts
#	A list of ACL elements which, if matched, causes Squid to send
#	an extra CRLF pair after the body of a PUT/POST request.
#
#	Some HTTP servers has broken implementations of PUT/POST,
#	and rely on an extra CRLF pair sent by some WWW clients.
#
#	Quote from RFC2616 section 4.1 on this matter:
#
#	  Note: certain buggy HTTP/1.0 client implementations generate an
#	  extra CRLF's after a POST request. To restate what is explicitly
#	  forbidden by the BNF, an HTTP/1.1 client must not preface or follow
#	  a request with an extra CRLF.
#
#	This clause only supports fast acl types.
#	See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
#
#Example:
# acl buggy_server url_regex ^http://....
# broken_posts allow buggy_server
#Default:
# Obey RFC 2616.

#  TAG: adaptation_uses_indirect_client	on|off
#	Controls whether the indirect client IP address (instead of the direct
#	client IP address) is passed to adaptation services.
#
#	See also: follow_x_forwarded_for adaptation_send_client_ip
#Default:
# adaptation_uses_indirect_client on

#  TAG: via	on|off
#	If set (default), Squid will include a Via header in requests and
#	replies as required by RFC2616.
#Default:
# via on

#  TAG: ie_refresh	on|off
#	Microsoft Internet Explorer up until version 5.5 Service
#	Pack 1 has an issue with transparent proxies, wherein it
#	is impossible to force a refresh.  Turning this on provides
#	a partial fix to the problem, by causing all IMS-REFRESH
#	requests from older IE versions to check the origin server
#	for fresh content.  This reduces hit ratio by some amount
#	(~10% in my experience), but allows users to actually get
#	fresh content when they want it.  Note because Squid
#	cannot tell if the user is using 5.5 or 5.5SP1, the behavior
#	of 5.5 is unchanged from old versions of Squid (i.e. a
#	forced refresh is impossible).  Newer versions of IE will,
#	hopefully, continue to have the new behavior and will be
#	handled based on that assumption.  This option defaults to
#	the old Squid behavior, which is better for hit ratios but
#	worse for clients using IE, if they need to be able to
#	force fresh content.
#Default:
# ie_refresh off

#  TAG: vary_ignore_expire	on|off
#	Many HTTP servers supporting Vary gives such objects
#	immediate expiry time with no cache-control header
#	when requested by a HTTP/1.0 client. This option
#	enables Squid to ignore such expiry times until
#	HTTP/1.1 is fully implemented.
#
#	WARNING: If turned on this may eventually cause some
#	varying objects not intended for caching to get cached.
#Default:
# vary_ignore_expire off

#  TAG: request_entities
#	Squid defaults to deny GET and HEAD requests with request entities,
#	as the meaning of such requests are undefined in the HTTP standard
#	even if not explicitly forbidden.
#
#	Set this directive to on if you have clients which insists
#	on sending request entities in GET or HEAD requests. But be warned
#	that there is server software (both proxies and web servers) which
#	can fail to properly process this kind of request which may make you
#	vulnerable to cache pollution attacks if enabled.
#Default:
# request_entities off

#  TAG: request_header_access
#	Usage: request_header_access header_name allow|deny [!]aclname ...
#
#	WARNING: Doing this VIOLATES the HTTP standard.  Enabling
#	this feature could make you liable for problems which it
#	causes.
#
#	This option replaces the old 'anonymize_headers' and the
#	older 'http_anonymizer' option with something that is much
#	more configurable. A list of ACLs for each header name allows
#	removal of specific header fields under specific conditions.
#
#	This option only applies to outgoing HTTP request headers (i.e.,
#	headers sent by Squid to the next HTTP hop such as a cache peer
#	or an origin server). The option has no effect during cache hit
#	detection. The equivalent adaptation vectoring point in ICAP
#	terminology is post-cache REQMOD.
#
#	The option is applied to individual outgoing request header
#	fields. For each request header field F, Squid uses the first
#	qualifying sets of request_header_access rules:
#
#	    1. Rules with header_name equal to F's name.
#	    2. Rules with header_name 'Other', provided F's name is not
#	       on the hard-coded list of commonly used HTTP header names.
#	    3. Rules with header_name 'All'.
#
#	Within that qualifying rule set, rule ACLs are checked as usual.
#	If ACLs of an "allow" rule match, the header field is allowed to
#	go through as is. If ACLs of a "deny" rule match, the header is
#	removed and request_header_replace is then checked to identify
#	if the removed header has a replacement. If no rules within the
#	set have matching ACLs, the header field is left as is.
#
#	For example, to achieve the same behavior as the old
#	'http_anonymizer standard' option, you should use:
#
#		request_header_access From deny all
#		request_header_access Referer deny all
#		request_header_access User-Agent deny all
#
#	Or, to reproduce the old 'http_anonymizer paranoid' feature
#	you should use:
#
#		request_header_access Authorization allow all
#		request_header_access Proxy-Authorization allow all
#		request_header_access Cache-Control allow all
#		request_header_access Content-Length allow all
#		request_header_access Content-Type allow all
#		request_header_access Date allow all
#		request_header_access Host allow all
#		request_header_access If-Modified-Since allow all
#		request_header_access Pragma allow all
#		request_header_access Accept allow all
#		request_header_access Accept-Charset allow all
#		request_header_access Accept-Encoding allow all
#		request_header_access Accept-Language allow all
#		request_header_access Connection allow all
#		request_header_access All deny all
#
#	HTTP reply headers are controlled with the reply_header_access directive.
#
#	By default, all headers are allowed (no anonymizing is performed).
#Default:
# No limits.

#  TAG: reply_header_access
#	Usage: reply_header_access header_name allow|deny [!]aclname ...
#
#	WARNING: Doing this VIOLATES the HTTP standard.  Enabling
#	this feature could make you liable for problems which it
#	causes.
#
#	This option only applies to reply headers, i.e., from the
#	server to the client.
#
#	This is the same as request_header_access, but in the other
#	direction. Please see request_header_access for detailed
#	documentation.
#
#	For example, to achieve the same behavior as the old
#	'http_anonymizer standard' option, you should use:
#
#		reply_header_access Server deny all
#		reply_header_access WWW-Authenticate deny all
#		reply_header_access Link deny all
#
#	Or, to reproduce the old 'http_anonymizer paranoid' feature
#	you should use:
#
#		reply_header_access Allow allow all
#		reply_header_access WWW-Authenticate allow all
#		reply_header_access Proxy-Authenticate allow all
#		reply_header_access Cache-Control allow all
#		reply_header_access Content-Encoding allow all
#		reply_header_access Content-Length allow all
#		reply_header_access Content-Type allow all
#		reply_header_access Date allow all
#		reply_header_access Expires allow all
#		reply_header_access Last-Modified allow all
#		reply_header_access Location allow all
#		reply_header_access Pragma allow all
#		reply_header_access Content-Language allow all
#		reply_header_access Retry-After allow all
#		reply_header_access Title allow all
#		reply_header_access Content-Disposition allow all
#		reply_header_access Connection allow all
#		reply_header_access All deny all
#
#	HTTP request headers are controlled with the request_header_access directive.
#
#	By default, all headers are allowed (no anonymizing is
#	performed).
#Default:
# No limits.

#  TAG: request_header_replace
#	Usage:   request_header_replace header_name message
#	Example: request_header_replace User-Agent Nutscrape/1.0 (CP/M; 8-bit)
#
#	This option allows you to change the contents of headers
#	denied with request_header_access above, by replacing them
#	with some fixed string.
#
#	This only applies to request headers, not reply headers.
#
#	By default, headers are removed if denied.
#Default:
# none

#  TAG: reply_header_replace
#        Usage:   reply_header_replace header_name message
#        Example: reply_header_replace Server Foo/1.0
#
#        This option allows you to change the contents of headers
#        denied with reply_header_access above, by replacing them
#        with some fixed string.
#
#        This only applies to reply headers, not request headers.
#
#        By default, headers are removed if denied.
#Default:
# none

#  TAG: request_header_add
#	Usage:   request_header_add field-name field-value acl1 [acl2] ...
#	Example: request_header_add X-Client-CA "CA=%ssl::>cert_issuer" all
#
#	This option adds header fields to outgoing HTTP requests (i.e.,
#	request headers sent by Squid to the next HTTP hop such as a
#	cache peer or an origin server). The option has no effect during
#	cache hit detection. The equivalent adaptation vectoring point
#	in ICAP terminology is post-cache REQMOD.
#
#	Field-name is a token specifying an HTTP header name. If a
#	standard HTTP header name is used, Squid does not check whether
#	the new header conflicts with any existing headers or violates
#	HTTP rules. If the request to be modified already contains a
#	field with the same name, the old field is preserved but the
#	header field values are not merged.
#
#	Field-value is either a token or a quoted string. If quoted
#	string format is used, then the surrounding quotes are removed
#	while escape sequences and %macros are processed.
#
#	In theory, all of the logformat codes can be used as %macros.
#	However, unlike logging (which happens at the very end of
#	transaction lifetime), the transaction may not yet have enough
#	information to expand a macro when the new header value is needed.
#	And some information may already be available to Squid but not yet
#	committed where the macro expansion code can access it (report
#	such instances!). The macro will be expanded into a single dash
#	('-') in such cases. Not all macros have been tested.
#
#	One or more Squid ACLs may be specified to restrict header
#	injection to matching requests. As always in squid.conf, all
#	ACLs in an option ACL list must be satisfied for the insertion
#	to happen. The request_header_add option supports fast ACLs
#	only.
#Default:
# none

#  TAG: note
#	This option used to log custom information about the master
#	transaction. For example, an admin may configure Squid to log
#	which "user group" the transaction belongs to, where "user group"
#	will be determined based on a set of ACLs and not [just]
#	authentication information.
#	Values of key/value pairs can be logged using %{key}note macros:
#
#	    note key value acl ...
#	    logformat myFormat ... %{key}note ...
#Default:
# none

#  TAG: relaxed_header_parser	on|off|warn
#	In the default "on" setting Squid accepts certain forms
#	of non-compliant HTTP messages where it is unambiguous
#	what the sending application intended even if the message
#	is not correctly formatted. The messages is then normalized
#	to the correct form when forwarded by Squid.
#
#	If set to "warn" then a warning will be emitted in cache.log
#	each time such HTTP error is encountered.
#
#	If set to "off" then such HTTP errors will cause the request
#	or response to be rejected.
#Default:
# relaxed_header_parser on

#  TAG: collapsed_forwarding	(on|off)
#       When enabled, instead of forwarding each concurrent request for
#       the same URL, Squid just sends the first of them. The other, so
#       called "collapsed" requests, wait for the response to the first
#       request and, if it happens to be cachable, use that response.
#       Here, "concurrent requests" means "received after the first
#       request headers were parsed and before the corresponding response
#       headers were parsed".
#
#       This feature is disabled by default: enabling collapsed
#       forwarding needlessly delays forwarding requests that look
#       cachable (when they are collapsed) but then need to be forwarded
#       individually anyway because they end up being for uncachable
#       content. However, in some cases, such as acceleration of highly
#       cachable content with periodic or grouped expiration times, the
#       gains from collapsing [large volumes of simultaneous refresh
#       requests] outweigh losses from such delays.
#
#       Squid collapses two kinds of requests: regular client requests
#       received on one of the listening ports and internal "cache
#       revalidation" requests which are triggered by those regular
#       requests hitting a stale cached object. Revalidation collapsing
#       is currently disabled for Squid instances containing SMP-aware
#       disk or memory caches and for Vary-controlled cached objects.
#Default:
# collapsed_forwarding off