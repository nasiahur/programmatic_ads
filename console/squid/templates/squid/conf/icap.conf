# -----------------------------------------------------------------------------
# ICAP OPTIONS
# -----------------------------------------------------------------------------

#
#  TAG: icap_enable on|off
#   If you want to enable the ICAP module support, set this to on.
#Default:
# icap_enable off

# enable ICAP only if either web filter or ICAP antivirus is enabled

{% if websafety.enable_icap %}
icap_enable on
{% else %}
{% if antivirus.enable and antivirus.av_type == 1 %}
icap_enable on
{% else %}
icap_enable off
{% endif %}
{% endif %}

#  TAG: icap_connect_timeout
#   This parameter specifies how long to wait for the TCP connect to
#   the requested ICAP server to complete before giving up and either
#   terminating the HTTP transaction or bypassing the failure.
#
#   The default for optional services is peer_connect_timeout.
#   The default for essential services is connect_timeout.
#   If this option is explicitly set, its value applies to all services.
#Default:
# none

#  TAG: icap_io_timeout time-units
#   This parameter specifies how long to wait for an I/O activity on
#   an established, active ICAP connection before giving up and
#   either terminating the HTTP transaction or bypassing the
#   failure.
#Default:
# Use read_timeout.

#  TAG: icap_service_failure_limit  limit [in memory-depth time-units]
#   The limit specifies the number of failures that Squid tolerates
#   when establishing a new TCP connection with an ICAP service. If
#   the number of failures exceeds the limit, the ICAP service is
#   not used for new ICAP requests until it is time to refresh its
#   OPTIONS.
#
#   A negative value disables the limit. Without the limit, an ICAP
#   service will not be considered down due to connectivity failures
#   between ICAP OPTIONS requests.
#
#   Squid forgets ICAP service failures older than the specified
#   value of memory-depth. The memory fading algorithm 
#   is approximate because Squid does not remember individual 
#   errors but groups them instead, splitting the option
#   value into ten time slots of equal length.
#
#   When memory-depth is 0 and by default this option has no 
#   effect on service failure expiration.
#
#   Squid always forgets failures when updating service settings
#   using an ICAP OPTIONS transaction, regardless of this option
#   setting.
#
#   For example,
#       # suspend service usage after 10 failures in 5 seconds:
#       icap_service_failure_limit 10 in 5 seconds
#Default:
# icap_service_failure_limit 10
icap_service_failure_limit -1

#  TAG: icap_service_revival_delay
#   The delay specifies the number of seconds to wait after an ICAP
#   OPTIONS request failure before requesting the options again. The
#   failed ICAP service is considered "down" until fresh OPTIONS are
#   fetched.
#
#   The actual delay cannot be smaller than the hardcoded minimum
#   delay of 30 seconds.
#Default:
# icap_service_revival_delay 180

#  TAG: icap_preview_enable on|off
#   The ICAP Preview feature allows the ICAP server to handle the
#   HTTP message by looking only at the beginning of the message body
#   or even without receiving the body at all. In some environments, 
#   previews greatly speedup ICAP processing.
#
#   During an ICAP OPTIONS transaction, the server may tell Squid what
#   HTTP messages should be previewed and how big the preview should be.
#   Squid will not use Preview if the server did not request one.
#
#   To disable ICAP Preview for all ICAP services, regardless of
#   individual ICAP server OPTIONS responses, set this option to "off".
#Example:
#icap_preview_enable off
#Default:
# icap_preview_enable on
icap_preview_enable on

#  TAG: icap_preview_size
#   The default size of preview data to be sent to the ICAP server.
#   This value might be overwritten on a per server basis by OPTIONS requests.
#Default:
# No preview sent.
icap_preview_size 2048

#  TAG: icap_206_enable on|off
#   206 (Partial Content) responses is an ICAP extension that allows the
#   ICAP agents to optionally combine adapted and original HTTP message
#   content. The decision to combine is postponed until the end of the
#   ICAP response. Squid supports Partial Content extension by default.
#
#   Activation of the Partial Content extension is negotiated with each
#   ICAP service during OPTIONS exchange. Most ICAP servers should handle
#   negotation correctly even if they do not support the extension, but
#   some might fail. To disable Partial Content support for all ICAP
#   services and to avoid any negotiation, set this option to "off".
#
#   Example:
#       icap_206_enable off
#Default:
# icap_206_enable on

#  TAG: icap_default_options_ttl
#   The default TTL value for ICAP OPTIONS responses that don't have
#   an Options-TTL header.
#Default:
# icap_default_options_ttl 60

#  TAG: icap_persistent_connections on|off
#   Whether or not Squid should use persistent connections to
#   an ICAP server.
#Default:
# icap_persistent_connections on
icap_persistent_connections on

#  TAG: adaptation_send_client_ip   on|off
#   If enabled, Squid shares HTTP client IP information with adaptation
#   services. For ICAP, Squid adds the X-Client-IP header to ICAP requests.
#   For eCAP, Squid sets the libecap::metaClientIp transaction option.
#
#   See also: adaptation_uses_indirect_client
#Default:
# adaptation_send_client_ip off
adaptation_send_client_ip on

#  TAG: adaptation_send_username    on|off
#   This sends authenticated HTTP client username (if available) to
#   the adaptation service.
#
#   For ICAP, the username value is encoded based on the
#   icap_client_username_encode option and is sent using the header
#   specified by the icap_client_username_header option.
#Default:
# adaptation_send_username off
adaptation_send_username on

#  TAG: icap_client_username_header
#   ICAP request header name to use for adaptation_send_username.
#Default:
# icap_client_username_header X-Client-Username

#  TAG: icap_client_username_encode on|off
#   Whether to base64 encode the authenticated client username.
#Default:
# icap_client_username_encode off

#  TAG: icap_service
#   Defines a single ICAP service using the following format:
#
#   icap_service id vectoring_point uri [option ...]
#
#   id: ID
#       an opaque identifier or name which is used to direct traffic to
#       this specific service. Must be unique among all adaptation
#       services in squid.conf.
#
#   vectoring_point: reqmod_precache|reqmod_postcache|respmod_precache|respmod_postcache
#       This specifies at which point of transaction processing the
#       ICAP service should be activated. *_postcache vectoring points
#       are not yet supported.
#
#   uri: icap://servername:port/servicepath
#       ICAP server and service location.
#
#   ICAP does not allow a single service to handle both REQMOD and RESPMOD
#   transactions. Squid does not enforce that requirement. You can specify
#   services with the same service_url and different vectoring_points. You
#   can even specify multiple identical services as long as their
#   service_names differ.
#
#   To activate a service, use the adaptation_access directive. To group
#   services, use adaptation_service_chain and adaptation_service_set.
#
#   Service options are separated by white space. ICAP services support
#   the following name=value options:
#
#   bypass=on|off|1|0
#       If set to 'on' or '1', the ICAP service is treated as
#       optional. If the service cannot be reached or malfunctions,
#       Squid will try to ignore any errors and process the message as
#       if the service was not enabled. No all ICAP errors can be
#       bypassed.  If set to 0, the ICAP service is treated as
#       essential and all ICAP errors will result in an error page
#       returned to the HTTP client.
#
#       Bypass is off by default: services are treated as essential.
#
#   routing=on|off|1|0
#       If set to 'on' or '1', the ICAP service is allowed to
#       dynamically change the current message adaptation plan by
#       returning a chain of services to be used next. The services
#       are specified using the X-Next-Services ICAP response header
#       value, formatted as a comma-separated list of service names.
#       Each named service should be configured in squid.conf. Other
#       services are ignored. An empty X-Next-Services value results
#       in an empty plan which ends the current adaptation.
#
#       Dynamic adaptation plan may cross or cover multiple supported
#       vectoring points in their natural processing order.
#
#       Routing is not allowed by default: the ICAP X-Next-Services
#       response header is ignored.
#
#   ipv6=on|off
#       Only has effect on split-stack systems. The default on those systems
#       is to use IPv4-only connections. When set to 'on' this option will
#       make Squid use IPv6-only connections to contact this ICAP service.
#
#   on-overload=block|bypass|wait|force
#       If the service Max-Connections limit has been reached, do
#       one of the following for each new ICAP transaction:
#         * block:  send an HTTP error response to the client
#         * bypass: ignore the "over-connected" ICAP service
#         * wait:   wait (in a FIFO queue) for an ICAP connection slot
#         * force:  proceed, ignoring the Max-Connections limit 
#
#       In SMP mode with N workers, each worker assumes the service
#       connection limit is Max-Connections/N, even though not all
#       workers may use a given service.
#
#       The default value is "bypass" if service is bypassable,
#       otherwise it is set to "wait".
#       
#
#   max-conn=number
#       Use the given number as the Max-Connections limit, regardless
#       of the Max-Connections value given by the service, if any.
#
#   Older icap_service format without optional named parameters is
#   deprecated but supported for backward compatibility.
#
#Example:
#icap_service svcBlocker reqmod_precache icap://icap1.mydomain.net:1344/reqmod bypass=0
#icap_service svcLogger reqmod_precache icap://icap2.mydomain.net:1344/respmod routing=on
#Default:
# none


# services for web safety icap web filter
{% if websafety.enable_icap %}
icap_service websafety1 reqmod_precache icap://{{websafety.wsicap_address}}:{{websafety.wsicap_port}}/reqmod bypass=0
icap_service websafety2 respmod_precache icap://{{websafety.wsicap_address}}:{{websafety.wsicap_port}}/respmod bypass=0
{% endif %}

# services for third party ICAP antivirus
{% if antivirus.enable and antivirus.av_type == 1 %}
icap_service icap_av1 reqmod_precache icap://{{antivirus.avicap_address}}:{{antivirus.avicap_port}}/{{antivirus.avicap_reqpath}} bypass=0
icap_service icap_av2 respmod_precache icap://{{antivirus.avicap_address}}:{{antivirus.avicap_port}}/{{antivirus.avicap_respath}} bypass={% if antivirus.avicap_res_bypass%}1{%else%}0{%endif%}
{{antivirus.avicap_options}}
{% endif %}

#  TAG: icap_class
#   This deprecated option was documented to define an ICAP service
#   chain, even though it actually defined a set of similar, redundant
#   services, and the chains were not supported. 
#
#   To define a set of redundant services, please use the
#   adaptation_service_set directive. For service chains, use
#   adaptation_service_chain.
#Default:
# none

#  TAG: icap_access
#   This option is deprecated. Please use adaptation_access, which
#   has the same ICAP functionality, but comes with better
#   documentation, and eCAP support.
#Default:
# none
