# -----------------------------------------------------------------------------
# NETWORK OPTIONS
# -----------------------------------------------------------------------------

#  TAG: http_port
#	Usage:	port [mode] [options]
#		hostname:port [mode] [options]
#		1.2.3.4:port [mode] [options]
#
#	The socket addresses where Squid will listen for HTTP client
#	requests.  You may specify multiple socket addresses.
#	There are three forms: port alone, hostname with port, and
#	IP address with port.  If you specify a hostname or IP
#	address, Squid binds the socket to that specific
#	address. Most likely, you do not need to bind to a specific
#	address, so you can use the port number alone.
#
#	If you are running Squid in accelerator mode, you
#	probably want to listen on port 80 also, or instead.
#
#	The -a command line option may be used to specify additional
#	port(s) where Squid listens for proxy request. Such ports will
#	be plain proxy ports with no options.
#
#	You may specify multiple socket addresses on multiple lines.
#
#	Modes:
#
#	   intercept	Support for IP-Layer NAT interception delivering
#			traffic to this Squid port.
#			NP: disables authentication on the port.
#
#	   tproxy	Support Linux TPROXY (or BSD divert-to) with spoofing
#			of outgoing connections using the client IP address.
#			NP: disables authentication on the port.
#
#	   accel	Accelerator / reverse proxy mode
#
#	   ssl-bump	For each CONNECT request allowed by ssl_bump ACLs,
#			establish secure connection with the client and with
#			the server, decrypt HTTPS messages as they pass through
#			Squid, and treat them as unencrypted HTTP messages,
#			becoming the man-in-the-middle.
#
#			The ssl_bump option is required to fully enable
#			bumping of CONNECT requests.
#
#	Omitting the mode flag causes default forward proxy mode to be used.
#
#
#	Accelerator Mode Options:
#
#	   defaultsite=domainname
#			What to use for the Host: header if it is not present
#			in a request. Determines what site (not origin server)
#			accelerators should consider the default.
#
#	   no-vhost	Disable using HTTP/1.1 Host header for virtual domain support.
#
#	   protocol=	Protocol to reconstruct accelerated and intercepted
#			requests with. Defaults to HTTP/1.1 for http_port and
#			HTTPS/1.1 for https_port.
#			When an unsupported value is configured Squid will
#			produce a FATAL error.
#			Values: HTTP or HTTP/1.1, HTTPS or HTTPS/1.1
#
#	   vport	Virtual host port support. Using the http_port number
#			instead of the port passed on Host: headers.
#
#	   vport=NN	Virtual host port support. Using the specified port
#			number instead of the port passed on Host: headers.
#
#	   act-as-origin
#			Act as if this Squid is the origin server.
#			This currently means generate new Date: and Expires:
#			headers on HIT instead of adding Age:.
#
#	   ignore-cc	Ignore request Cache-Control headers.
#
#			WARNING: This option violates HTTP specifications if
#			used in non-accelerator setups.
#
#	   allow-direct	Allow direct forwarding in accelerator mode. Normally
#			accelerated requests are denied direct forwarding as if
#			never_direct was used.
#
#			WARNING: this option opens accelerator mode to security
#			vulnerabilities usually only affecting in interception
#			mode. Make sure to protect forwarding with suitable
#			http_access rules when using this.
#
#
#	SSL Bump Mode Options:
#	    In addition to these options ssl-bump requires TLS/SSL options.
#
#	   generate-host-certificates[=<on|off>]
#			Dynamically create SSL server certificates for the
#			destination hosts of bumped CONNECT requests.When 
#			enabled, the cert and key options are used to sign
#			generated certificates. Otherwise generated
#			certificate will be selfsigned.
#			If there is a CA certificate lifetime of the generated 
#			certificate equals lifetime of the CA certificate. If
#			generated certificate is selfsigned lifetime is three 
#			years.
#			This option is enabled by default when ssl-bump is used.
#			See the ssl-bump option above for more information.
#			
#	   dynamic_cert_mem_cache_size=SIZE
#			Approximate total RAM size spent on cached generated
#			certificates. If set to zero, caching is disabled. The
#			default value is 4MB.
#
#	TLS / SSL Options:
#
#	   cert=	Path to SSL certificate (PEM format).
#
#	   key=		Path to SSL private key file (PEM format)
#			if not specified, the certificate file is
#			assumed to be a combined certificate and
#			key file.
#
#	   version=	The version of SSL/TLS supported
#			    1	automatic (default)
#			    2	SSLv2 only
#			    3	SSLv3 only
#			    4	TLSv1.0 only
#			    5	TLSv1.1 only
#			    6	TLSv1.2 only
#
#	   cipher=	Colon separated list of supported ciphers.
#			NOTE: some ciphers such as EDH ciphers depend on
#			      additional settings. If those settings are
#			      omitted the ciphers may be silently ignored
#			      by the OpenSSL library.
#
#	   options=	Various SSL implementation options. The most important
#			being:
#			    NO_SSLv2    Disallow the use of SSLv2
#			    NO_SSLv3    Disallow the use of SSLv3
#			    NO_TLSv1    Disallow the use of TLSv1.0
#			    NO_TLSv1_1  Disallow the use of TLSv1.1
#			    NO_TLSv1_2  Disallow the use of TLSv1.2
#			    SINGLE_DH_USE Always create a new key when using
#				      temporary/ephemeral DH key exchanges
#			    NO_TICKET Disables TLS tickets extension
#
#			    SINGLE_ECDH_USE
#				      Enable ephemeral ECDH key exchange.
#				      The adopted curve should be specified
#				      using the tls-dh option.
#
#			    ALL       Enable various bug workarounds
#				      suggested as "harmless" by OpenSSL
#				      Be warned that this reduces SSL/TLS
#				      strength to some attacks.
#			See OpenSSL SSL_CTX_set_options documentation for a
#			complete list of options.
#
#	   clientca=	File containing the list of CAs to use when
#			requesting a client certificate.
#
#	   cafile=	File containing additional CA certificates to
#			use when verifying client certificates. If unset
#			clientca will be used.
#
#	   capath=	Directory containing additional CA certificates
#			and CRL lists to use when verifying client certificates.
#
#	   crlfile=	File of additional CRL lists to use when verifying
#			the client certificate, in addition to CRLs stored in
#			the capath. Implies VERIFY_CRL flag below.
#
#	   tls-dh=[curve:]file
#			File containing DH parameters for temporary/ephemeral DH key
#			exchanges, optionally prefixed by a curve for ephemeral ECDH
#			key exchanges.
#			See OpenSSL documentation for details on how to create the
#			DH parameter file. Supported curves for ECDH can be listed
#			using the "openssl ecparam -list_curves" command.
#			WARNING: EDH and EECDH ciphers will be silently disabled if
#				 this option is not set.
#
#	   sslflags=	Various flags modifying the use of SSL:
#			    DELAYED_AUTH
#				Don't request client certificates
#				immediately, but wait until acl processing
#				requires a certificate (not yet implemented).
#			    NO_DEFAULT_CA
#				Don't use the default CA lists built in
#				to OpenSSL.
#			    NO_SESSION_REUSE
#				Don't allow for session reuse. Each connection
#				will result in a new SSL session.
#			    VERIFY_CRL
#				Verify CRL lists when accepting client
#				certificates.
#			    VERIFY_CRL_ALL
#				Verify CRL lists for all certificates in the
#				client certificate chain.
#
#	   sslcontext=	SSL session ID context identifier.
#
#	Other Options:
#
#	   connection-auth[=on|off]
#	                use connection-auth=off to tell Squid to prevent 
#	                forwarding Microsoft connection oriented authentication
#			(NTLM, Negotiate and Kerberos)
#
#	   disable-pmtu-discovery=
#			Control Path-MTU discovery usage:
#			    off		lets OS decide on what to do (default).
#			    transparent	disable PMTU discovery when transparent
#					support is enabled.
#			    always	disable always PMTU discovery.
#
#			In many setups of transparently intercepting proxies
#			Path-MTU discovery can not work on traffic towards the
#			clients. This is the case when the intercepting device
#			does not fully track connections and fails to forward
#			ICMP must fragment messages to the cache server. If you
#			have such setup and experience that certain clients
#			sporadically hang or never complete requests set
#			disable-pmtu-discovery option to 'transparent'.
#
#	   name=	Specifies a internal name for the port. Defaults to
#			the port specification (port or addr:port)
#
#	   tcpkeepalive[=idle,interval,timeout]
#			Enable TCP keepalive probes of idle connections.
#			In seconds; idle is the initial time before TCP starts
#			probing the connection, interval how often to probe, and
#			timeout the time before giving up.
#
#	   require-proxy-header
#			Require PROXY protocol version 1 or 2 connections.
#			The proxy_protocol_access is required to whitelist
#			downstream proxies which can be trusted.
#
#	If you run Squid on a dual-homed machine with an internal
#	and an external interface we recommend you to specify the
#	internal address:port in http_port. This way Squid will only be
#	visible on the internal address.
#
#

# explicit proxy mode, squid normally listens to port 3128, always enabled
http_port {% if network.explicit_address %}{{network.explicit_address}}:{% endif %}{{network.explicit_port}} ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB cert=/opt/websafety/etc/myca.pem {% if network.enable_proxy_proto %}require-proxy-header{%endif%}

{% if network.intercept_mode == 1 or network.intercept_mode == 2 %}
# Cisco WCCP integrated mode or default gateway proxy mode
http_port {% if network.intercept_address %}{{network.intercept_address}}:{% endif %}{{network.intercept_port_http}} intercept
https_port {% if network.intercept_address %}{{network.intercept_address}}:{% endif %}{{network.intercept_port_https}} intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB cert=/opt/websafety/etc/myca.pem
{% endif %}

#  TAG: https_port
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#	Usage:  [ip:]port cert=certificate.pem [key=key.pem] [mode] [options...]
#
#	The socket address where Squid will listen for client requests made
#	over TLS or SSL connections. Commonly referred to as HTTPS.
#
#	This is most useful for situations where you are running squid in
#	accelerator mode and you want to do the SSL work at the accelerator level.
#
#	You may specify multiple socket addresses on multiple lines,
#	each with their own SSL certificate and/or options.
#
#	Modes:
#
#	   accel	Accelerator / reverse proxy mode
#
#	   intercept	Support for IP-Layer interception of
#			outgoing requests without browser settings.
#			NP: disables authentication and IPv6 on the port.
#
#	   tproxy	Support Linux TPROXY for spoofing outgoing
#			connections using the client IP address.
#			NP: disables authentication and maybe IPv6 on the port.
#
#	   ssl-bump	For each intercepted connection allowed by ssl_bump
#			ACLs, establish a secure connection with the client and with
#			the server, decrypt HTTPS messages as they pass through
#			Squid, and treat them as unencrypted HTTP messages,
#			becoming the man-in-the-middle.
#
#			An "ssl_bump server-first" match is required to
#			fully enable bumping of intercepted SSL	connections.
#
#			Requires tproxy or intercept.
#
#	Omitting the mode flag causes default forward proxy mode to be used.
#
#
#	See http_port for a list of generic options
#
#
#	SSL Options:
#
#	   cert=	Path to SSL certificate (PEM format).
#
#	   key=		Path to SSL private key file (PEM format)
#			if not specified, the certificate file is
#			assumed to be a combined certificate and
#			key file.
#
#	   version=	The version of SSL/TLS supported
#			    1	automatic (default)
#			    2	SSLv2 only
#			    3	SSLv3 only
#			    4	TLSv1 only
#
#	   cipher=	Colon separated list of supported ciphers.
#
#	   options=	Various SSL engine options. The most important
#			being:
#			    NO_SSLv2  Disallow the use of SSLv2
#			    NO_SSLv3  Disallow the use of SSLv3
#			    NO_TLSv1  Disallow the use of TLSv1
#
#			    SINGLE_DH_USE Always create a new key when using
#				      temporary/ephemeral DH key exchanges
#
#			    SINGLE_ECDH_USE
#				      Enable ephemeral ECDH key exchange.
#				      The adopted curve should be specified
#				      using the tls-dh option.
#
#			See src/ssl_support.c or OpenSSL SSL_CTX_set_options
#			documentation for a complete list of options.
#
#	   clientca=	File containing the list of CAs to use when
#			requesting a client certificate.
#
#	   cafile=	File containing additional CA certificates to
#			use when verifying client certificates. If unset
#			clientca will be used.
#
#	   capath=	Directory containing additional CA certificates
#			and CRL lists to use when verifying client certificates.
#
#	   crlfile=	File of additional CRL lists to use when verifying
#			the client certificate, in addition to CRLs stored in
#			the capath. Implies VERIFY_CRL flag below.
#
#	   tls-dh=[curve:]file
#			File containing DH parameters for temporary/ephemeral DH key
#			exchanges, optionally prefixed by a curve for ephemeral ECDH
#			key exchanges.
#
#	   sslflags=	Various flags modifying the use of SSL:
#			    DELAYED_AUTH
#				Don't request client certificates
#				immediately, but wait until acl processing
#				requires a certificate (not yet implemented).
#			    NO_DEFAULT_CA
#				Don't use the default CA lists built in
#				to OpenSSL.
#			    NO_SESSION_REUSE
#				Don't allow for session reuse. Each connection
#				will result in a new SSL session.
#			    VERIFY_CRL
#				Verify CRL lists when accepting client
#				certificates.
#			    VERIFY_CRL_ALL
#				Verify CRL lists for all certificates in the
#				client certificate chain.
#
#	   sslcontext=	SSL session ID context identifier.
#
#	   generate-host-certificates[=<on|off>]
#			Dynamically create SSL server certificates for the
#			destination hosts of bumped SSL requests.When
#			enabled, the cert and key options are used to sign
#			generated certificates. Otherwise generated
#			certificate will be selfsigned.
#			If there is CA certificate life time of generated
#			certificate equals lifetime of CA certificate. If
#			generated certificate is selfsigned lifetime is three
#			years.
#			This option is enabled by default when SslBump is used.
#			See the sslBump option above for more information.
#
#	   dynamic_cert_mem_cache_size=SIZE
#			Approximate total RAM size spent on cached generated
#			certificates. If set to zero, caching is disabled. The
#			default value is 4MB.
#
#	See http_port for a list of available options.
#Default:
# none

#  TAG: ftp_port
#	Enables Native FTP proxy by specifying the socket address where Squid
#	listens for FTP client requests. See http_port directive for various
#	ways to specify the listening address and mode.
#
#	Usage: ftp_port address [mode] [options]
#
#	WARNING: This is a new, experimental, complex feature that has seen
#	limited production exposure. Some Squid modules (e.g., caching) do not
#	currently work with native FTP proxying, and many features have not
#	even been tested for compatibility. Test well before deploying!
#
#	Native FTP proxying differs substantially from proxying HTTP requests
#	with ftp:// URIs because Squid works as an FTP server and receives
#	actual FTP commands (rather than HTTP requests with FTP URLs).
#
#	Native FTP commands accepted at ftp_port are internally converted or
#	wrapped into HTTP-like messages. The same happens to Native FTP
#	responses received from FTP origin servers. Those HTTP-like messages
#	are shoveled through regular access control and adaptation layers
#	between the FTP client and the FTP origin server. This allows Squid to
#	examine, adapt, block, and log FTP exchanges. Squid reuses most HTTP
#	mechanisms when shoveling wrapped FTP messages. For example,
#	http_access and adaptation_access directives are used.
#
#	Modes:
#
#	   intercept	Same as http_port intercept. The FTP origin address is
#			determined based on the intended destination of the
#			intercepted connection.
#
#	   tproxy	Support Linux TPROXY for spoofing outgoing
#			connections using the client IP address.
#			NP: disables authentication and maybe IPv6 on the port.
#
#	By default (i.e., without an explicit mode option), Squid extracts the
#	FTP origin address from the login@origin parameter of the FTP USER
#	command. Many popular FTP clients support such native FTP proxying.
#
#	Options:
#
#	   name=token	Specifies an internal name for the port. Defaults to
#			the port address. Usable with myportname ACL.
#
#	   ftp-track-dirs
#			Enables tracking of FTP directories by injecting extra
#			PWD commands and adjusting Request-URI (in wrapping
#			HTTP requests) to reflect the current FTP server
#			directory. Tracking is disabled by default.
#
#	   protocol=FTP	Protocol to reconstruct accelerated and intercepted
#			requests with. Defaults to FTP. No other accepted
#			values have been tested with. An unsupported value
#			results in a FATAL error. Accepted values are FTP,
#			HTTP (or HTTP/1.1), and HTTPS (or HTTPS/1.1).
#
#	Other http_port modes and options that are not specific to HTTP and
#	HTTPS may also work.
#Default:
# none

#  TAG: tcp_outgoing_tos
#	Allows you to select a TOS/Diffserv value for packets outgoing
#	on the server side, based on an ACL.
#
#	tcp_outgoing_tos ds-field [!]aclname ...
#
#	Example where normal_service_net uses the TOS value 0x00
#	and good_service_net uses 0x20
#
#	acl normal_service_net src 10.0.0.0/24
#	acl good_service_net src 10.0.1.0/24
#	tcp_outgoing_tos 0x00 normal_service_net
#	tcp_outgoing_tos 0x20 good_service_net
#
#	TOS/DSCP values really only have local significance - so you should
#	know what you're specifying. For more information, see RFC2474,
#	RFC2475, and RFC3260.
#
#	The TOS/DSCP byte must be exactly that - a octet value  0 - 255, or
#	"default" to use whatever default your host has.
#	Note that only multiples of 4 are usable as the two rightmost bits have
#	been redefined for use by ECN (RFC 3168 section 23.1).
#	The squid parser will enforce this by masking away the ECN bits.
#
#	Processing proceeds in the order specified, and stops at first fully
#	matching line.
#
#	Only fast ACLs are supported.
#Default:
# none

#  TAG: clientside_tos
#	Allows you to select a TOS/DSCP value for packets being transmitted
#	on the client-side, based on an ACL.
#
#	clientside_tos ds-field [!]aclname ...
#
#	Example where normal_service_net uses the TOS value 0x00
#	and good_service_net uses 0x20
#
#	acl normal_service_net src 10.0.0.0/24
#	acl good_service_net src 10.0.1.0/24
#	clientside_tos 0x00 normal_service_net
#	clientside_tos 0x20 good_service_net
#
#	Note: This feature is incompatible with qos_flows. Any TOS values set here
#	will be overwritten by TOS values in qos_flows.
#
#	The TOS/DSCP byte must be exactly that - a octet value  0 - 255, or
#	"default" to use whatever default your host has.
#	Note that only multiples of 4 are usable as the two rightmost bits have
#	been redefined for use by ECN (RFC 3168 section 23.1).
#	The squid parser will enforce this by masking away the ECN bits.
#
#Default:
# none

#  TAG: tcp_outgoing_mark
# Note: This option is only available if Squid is rebuilt with the
#       Packet MARK (Linux)
#
#	Allows you to apply a Netfilter mark value to outgoing packets
#	on the server side, based on an ACL.
#
#	tcp_outgoing_mark mark-value [!]aclname ...
#
#	Example where normal_service_net uses the mark value 0x00
#	and good_service_net uses 0x20
#
#	acl normal_service_net src 10.0.0.0/24
#	acl good_service_net src 10.0.1.0/24
#	tcp_outgoing_mark 0x00 normal_service_net
#	tcp_outgoing_mark 0x20 good_service_net
#
#	Only fast ACLs are supported.
#Default:
# none

#  TAG: clientside_mark
# Note: This option is only available if Squid is rebuilt with the
#       Packet MARK (Linux)
#
#	Allows you to apply a Netfilter mark value to packets being transmitted
#	on the client-side, based on an ACL.
#
#	clientside_mark mark-value [!]aclname ...
#
#	Example where normal_service_net uses the mark value 0x00
#	and good_service_net uses 0x20
#
#	acl normal_service_net src 10.0.0.0/24
#	acl good_service_net src 10.0.1.0/24
#	clientside_mark 0x00 normal_service_net
#	clientside_mark 0x20 good_service_net
#
#	Note: This feature is incompatible with qos_flows. Any mark values set here
#	will be overwritten by mark values in qos_flows.
#Default:
# none

#  TAG: qos_flows
#	Allows you to select a TOS/DSCP value to mark outgoing
#	connections to the client, based on where the reply was sourced.
#	For platforms using netfilter, allows you to set a netfilter mark
#	value instead of, or in addition to, a TOS value.
#
#	By default this functionality is disabled. To enable it with the default
#	settings simply use "qos_flows mark" or "qos_flows tos". Default
#	settings will result in the netfilter mark or TOS value being copied
#	from the upstream connection to the client. Note that it is the connection
#	CONNMARK value not the packet MARK value that is copied.
#
#	It is not currently possible to copy the mark or TOS value from the
#	client to the upstream connection request.
#
#	TOS values really only have local significance - so you should
#	know what you're specifying. For more information, see RFC2474,
#	RFC2475, and RFC3260.
#
#	The TOS/DSCP byte must be exactly that - a octet value  0 - 255.
#	Note that only multiples of 4 are usable as the two rightmost bits have
#	been redefined for use by ECN (RFC 3168 section 23.1).
#	The squid parser will enforce this by masking away the ECN bits.
#
#	Mark values can be any unsigned 32-bit integer value.
#
#	This setting is configured by setting the following values:
#
#	tos|mark                Whether to set TOS or netfilter mark values
#
#	local-hit=0xFF		Value to mark local cache hits.
#
#	sibling-hit=0xFF	Value to mark hits from sibling peers.
#
#	parent-hit=0xFF		Value to mark hits from parent peers.
#
#	miss=0xFF[/mask]	Value to mark cache misses. Takes precedence
#				over the preserve-miss feature (see below), unless
#				mask is specified, in which case only the bits
#				specified in the mask are written.
#
#	The TOS variant of the following features are only possible on Linux
#	and require your kernel to be patched with the TOS preserving ZPH
#	patch, available from http://zph.bratcheda.org
#	No patch is needed to preserve the netfilter mark, which will work
#	with all variants of netfilter.
#
#	disable-preserve-miss
#		This option disables the preservation of the TOS or netfilter
#		mark. By default, the existing TOS or netfilter mark value of
#		the response coming from the remote server will be retained
#		and masked with miss-mark.
#		NOTE: in the case of a netfilter mark, the mark must be set on
#		the connection (using the CONNMARK target) not on the packet
#		(MARK target).
#
#	miss-mask=0xFF
#		Allows you to mask certain bits in the TOS or mark value
#		received from the remote server, before copying the value to
#		the TOS sent towards clients.
#		Default for tos: 0xFF (TOS from server is not changed).
#		Default for mark: 0xFFFFFFFF (mark from server is not changed).
#
#	All of these features require the --enable-zph-qos compilation flag
#	(enabled by default). Netfilter marking also requires the
#	libnetfilter_conntrack libraries (--with-netfilter-conntrack) and
#	libcap 2.09+ (--with-libcap).
#
#Default:
# none

#  TAG: tcp_outgoing_address
#	Allows you to map requests to different outgoing IP addresses
#	based on the username or source address of the user making
#	the request.
#
#	tcp_outgoing_address ipaddr [[!]aclname] ...
#
#	For example;
#		Forwarding clients with dedicated IPs for certain subnets.
#
#	  acl normal_service_net src 10.0.0.0/24
#	  acl good_service_net src 10.0.2.0/24
#
#	  tcp_outgoing_address 2001:db8::c001 good_service_net
#	  tcp_outgoing_address 10.1.0.2 good_service_net
#
#	  tcp_outgoing_address 2001:db8::beef normal_service_net
#	  tcp_outgoing_address 10.1.0.1 normal_service_net
#
#	  tcp_outgoing_address 2001:db8::1
#	  tcp_outgoing_address 10.1.0.3
#
#	Processing proceeds in the order specified, and stops at first fully
#	matching line.
#
#	Squid will add an implicit IP version test to each line.
#	Requests going to IPv4 websites will use the outgoing 10.1.0.* addresses.
#	Requests going to IPv6 websites will use the outgoing 2001:db8:* addresses.
#
#
#	NOTE: The use of this directive using client dependent ACLs is
#	incompatible with the use of server side persistent connections. To
#	ensure correct results it is best to set server_persistent_connections
#	to off when using this directive in such configurations.
#
#	NOTE: The use of this directive to set a local IP on outgoing TCP links
#	is incompatible with using TPROXY to set client IP out outbound TCP links.
#	When needing to contact peers use the no-tproxy cache_peer option and the
#	client_dst_passthru directive re-enable normal forwarding such as this.
#
#Default:
# Address selection is performed by the operating system.

#  TAG: host_verify_strict
#	Regardless of this option setting, when dealing with intercepted
#	traffic, Squid always verifies that the destination IP address matches
#	the Host header domain or IP (called 'authority form URL').
#	
#	This enforcement is performed to satisfy a MUST-level requirement in
#	RFC 2616 section 14.23: "The Host field value MUST represent the naming
#	authority of the origin server or gateway given by the original URL".
#	
#	When set to ON:
#		Squid always responds with an HTTP 409 (Conflict) error
#		page and logs a security warning if there is no match.
#	
#		Squid verifies that the destination IP address matches
#		the Host header for forward-proxy and reverse-proxy traffic
#		as well. For those traffic types, Squid also enables the
#		following checks, comparing the corresponding Host header
#		and Request-URI components:
#	
#		 * The host names (domain or IP) must be identical,
#		   but valueless or missing Host header disables all checks.
#		   For the two host names to match, both must be either IP
#		   or FQDN.
#	
#		 * Port numbers must be identical, but if a port is missing
#		   the scheme-default port is assumed.
#	
#	
#	When set to OFF (the default):
#		Squid allows suspicious requests to continue but logs a
#		security warning and blocks caching of the response.
#	
#		 * Forward-proxy traffic is not checked at all.
#	
#		 * Reverse-proxy traffic is not checked at all.
#	
#		 * Intercepted traffic which passes verification is handled
#		   according to client_dst_passthru.
#	
#		 * Intercepted requests which fail verification are sent
#		   to the client original destination instead of DIRECT.
#		   This overrides 'client_dst_passthru off'.
#	
#		For now suspicious intercepted CONNECT requests are always
#		responded to with an HTTP 409 (Conflict) error page.
#	
#	
#	SECURITY NOTE:
#	
#	As described in CVE-2009-0801 when the Host: header alone is used
#	to determine the destination of a request it becomes trivial for
#	malicious scripts on remote websites to bypass browser same-origin
#	security policy and sandboxing protections.
#	
#	The cause of this is that such applets are allowed to perform their
#	own HTTP stack, in which case the same-origin policy of the browser
#	sandbox only verifies that the applet tries to contact the same IP
#	as from where it was loaded at the IP level. The Host: header may
#	be different from the connected IP and approved origin.
#	
#Default:
# host_verify_strict off

#  TAG: client_dst_passthru
#	With NAT or TPROXY intercepted traffic Squid may pass the request
#	directly to the original client destination IP or seek a faster
#	source using the HTTP Host header.
#	
#	Using Host to locate alternative servers can provide faster
#	connectivity with a range of failure recovery options.
#	But can also lead to connectivity trouble when the client and
#	server are attempting stateful interactions unaware of the proxy.
#	
#	This option (on by default) prevents alternative DNS entries being
#	located to send intercepted traffic DIRECT to an origin server.
#	The clients original destination IP and port will be used instead.
#	
#	Regardless of this option setting, when dealing with intercepted
#	traffic Squid will verify the Host: header and any traffic which
#	fails Host verification will be treated as if this option were ON.
#	
#	see host_verify_strict for details on the verification process.
#Default:
# client_dst_passthru on