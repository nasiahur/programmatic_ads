# -----------------------------------------------------------------------------
# SSL OPTIONS
# -----------------------------------------------------------------------------

#  TAG: ssl_unclean_shutdown
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Some browsers (especially MSIE) bugs out on SSL shutdown
#   messages.
#Default:
# ssl_unclean_shutdown off

#  TAG: ssl_engine
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   The OpenSSL engine to use. You will need to set this if you
#   would like to use hardware SSL acceleration for example.
#Default:
# none

#  TAG: sslproxy_client_certificate
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Client SSL Certificate to use when proxying https:// URLs
#Default:
# none

#  TAG: sslproxy_client_key
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Client SSL Key to use when proxying https:// URLs
#Default:
# none

#  TAG: sslproxy_version
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   SSL version level to use when proxying https:// URLs
#
#   The versions of SSL/TLS supported:
#
#       1   automatic (default)
#       2   SSLv2 only
#       3   SSLv3 only
#       4   TLSv1.0 only
#       5   TLSv1.1 only
#       6   TLSv1.2 only
#Default:
# automatic SSL/TLS version negotiation

#  TAG: sslproxy_options
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Colon (:) or comma (,) separated list of SSL implementation options
#   to use when proxying https:// URLs
#   
#   The most important being:
#
#       NO_SSLv2    Disallow the use of SSLv2
#       NO_SSLv3    Disallow the use of SSLv3
#       NO_TLSv1    Disallow the use of TLSv1.0
#       NO_TLSv1_1  Disallow the use of TLSv1.1
#       NO_TLSv1_2  Disallow the use of TLSv1.2
#
#       SINGLE_DH_USE
#             Always create a new key when using temporary/ephemeral
#             DH key exchanges
#
#       NO_TICKET
#             Disable use of RFC5077 session tickets. Some servers
#             may have problems understanding the TLS extension due
#             to ambiguous specification in RFC4507.
#
#       ALL       Enable various bug workarounds suggested as "harmless"
#             by OpenSSL. Be warned that this may reduce SSL/TLS
#             strength to some attacks.
#   
#   See the OpenSSL SSL_CTX_set_options documentation for a
#   complete list of possible options.
#   
#   WARNING: This directive takes a single token. If a space is used
#        the value(s) after that space are SILENTLY IGNORED.
#Default:
# none

#  TAG: sslproxy_cipher
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   SSL cipher list to use when proxying https:// URLs
#
#   Colon separated list of supported ciphers.
#Default:
# none

#  TAG: sslproxy_cafile
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   file containing CA certificates to use when verifying server
#   certificates while proxying https:// URLs
#Default:
# none

#  TAG: sslproxy_capath
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   directory containing CA certificates to use when verifying
#   server certificates while proxying https:// URLs
#Default:
# none

#  TAG: sslproxy_session_ttl
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Sets the timeout value for SSL sessions
#Default:
# sslproxy_session_ttl 300

#  TAG: sslproxy_session_cache_size
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#        Sets the cache size to use for ssl session
#Default:
# sslproxy_session_cache_size 2 MB

#  TAG: sslproxy_foreign_intermediate_certs
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Many origin servers fail to send their full server certificate
#   chain for verification, assuming the client already has or can
#   easily locate any missing intermediate certificates.
#
#   Squid uses the certificates from the specified file to fill in
#   these missing chains when trying to validate origin server
#   certificate chains.
#
#   The file is expected to contain zero or more PEM-encoded
#   intermediate certificates. These certificates are not treated
#   as trusted root certificates, and any self-signed certificate in
#   this file will be ignored.
#Default:
{% if foreign_intermediate_certs %}sslproxy_foreign_intermediate_certs /opt/websafety/etc/squid/foreign_intermediate_certs.pem{%endif%}

#  TAG: sslproxy_cert_sign_hash
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Sets the hashing algorithm to use when signing generated certificates.
#   Valid algorithm names depend on the OpenSSL library used. The following
#   names are usually available: sha1, sha256, sha512, and md5. Please see
#   your OpenSSL library manual for the available hashes. By default, Squids
#   that support this option use sha256 hashes.
#
#   Squid does not forcefully purge cached certificates that were generated
#   with an algorithm other than the currently configured one. They remain
#   in the cache, subject to the regular cache eviction policy, and become
#   useful if the algorithm changes again.
#Default:
# none

#  TAG: ssl_bump
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   This option is consulted when a CONNECT request is received on
#   an http_port (or a new connection is intercepted at an
#   https_port), provided that port was configured with an ssl-bump
#   flag. The subsequent data on the connection is either treated as
#   HTTPS and decrypted OR tunneled at TCP level without decryption,
#   depending on the first matching bumping "action".
#
#   ssl_bump <action> [!]acl ...
#
#   The following bumping actions are currently supported:
#
#       splice
#       Become a TCP tunnel without decrypting proxied traffic.
#       This is the default action.
#
#       bump
#       Establish a secure connection with the server and, using a
#       mimicked server certificate, with the client.
#
#       peek
#       Receive client (step SslBump1) or server (step SslBump2)
#       certificate while preserving the possibility of splicing the
#       connection. Peeking at the server certificate (during step 2)
#       usually precludes bumping of the connection at step 3.
#
#       stare
#       Receive client (step SslBump1) or server (step SslBump2)
#       certificate while preserving the possibility of bumping the
#       connection. Staring at the server certificate (during step 2)
#       usually precludes splicing of the connection at step 3.
#
#       terminate
#       Close client and server connections.
#
#   Backward compatibility actions available at step SslBump1:
#
#       client-first
#       Bump the connection. Establish a secure connection with the
#       client first, then connect to the server. This old mode does
#       not allow Squid to mimic server SSL certificate and does not
#       work with intercepted SSL connections.
#
#       server-first
#       Bump the connection. Establish a secure connection with the
#       server first, then establish a secure connection with the
#       client, using a mimicked server certificate. Works with both
#       CONNECT requests and intercepted SSL connections, but does
#       not allow to make decisions based on SSL handshake info.
#
#       peek-and-splice
#       Decide whether to bump or splice the connection based on 
#       client-to-squid and server-to-squid SSL hello messages.
#       XXX: Remove.
#
#       none
#       Same as the "splice" action.
#
#   All ssl_bump rules are evaluated at each of the supported bumping
#   steps.  Rules with actions that are impossible at the current step are
#   ignored. The first matching ssl_bump action wins and is applied at the
#   end of the current step. If no rules match, the splice action is used.
#   See the at_step ACL for a list of the supported SslBump steps.
#
#   This clause supports both fast and slow acl types.
#   See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
#
#   See also: http_port ssl-bump, https_port ssl-bump, and acl at_step.
#
#
#   # Example: Bump all TLS connections except those originating from
#   # localhost or those going to example.com.
#
#   acl broken_sites ssl::server_name .example.com
#   ssl_bump splice localhost
#   ssl_bump splice broken_sites
#   ssl_bump bump all
#Default:
# Become a TCP tunnel without decrypting proxied traffic.

# ignore ssl certificate errors by destination server domain name or IP address
acl ssl_error_domains dstdomain "/opt/websafety/etc/squid/ssl/error/domains.conf"    
acl ssl_error_ips     dst       "/opt/websafety/etc/squid/ssl/error/ips.conf"
acl ssl_error_ips     dst       "/opt/websafety/etc/squid/ssl/error/subnets.conf"

sslproxy_cert_error allow ssl_error_domains
sslproxy_cert_error allow ssl_error_ips

#
# squid with peek-n-splice type of sslbump
#

# declare acls
acl step1 at_step SslBump1
acl step2 at_step SslBump2
acl step3 at_step SslBump3

# exclude by detected categories or disabled ssl filter in policy, 
# works in explicit proxy deployment only by adding a special "X-SSL-Bump: skip" header to CONNECT request
acl ssl_skip_bump req_header X-SSL-Bump -i skip

# force sslbump to enable postponed blocking of CONNECT tunnels, works in explicit proxy deployment only 
# by adding a special "X-SSL-Bump: force" header to CONNECT request
acl ssl_force_bump req_header X-SSL-Bump -i force

# connections from localhost/127.0.0.1 to the proxy is never bumped
ssl_bump splice localhost

# the acls for SSL exclusions, even if admin has a 'targeted' ssl filtering mode exclusions MUST take precedence over targets
acl ssl_exclude_domains ssl::server_name "/opt/websafety/etc/squid/ssl/exclude/domains.conf"
acl ssl_exclude_ips     dst              "/opt/websafety/etc/squid/ssl/exclude/ips.conf"            
acl ssl_exclude_ips     dst              "/opt/websafety/etc/squid/ssl/exclude/subnets.conf"    

#
# ok NOW come the SSL peek-and-splice rules, ORDER IS IMPORTANT!!!
#

# skip SSL bump in both all and targeted mode
ssl_bump splice ssl_skip_bump

# peek at SNI the client sent to us
ssl_bump peek step1 all

# force bump in both all and targeted mode
ssl_bump bump ssl_force_bump

# exclude from decryption all domains and ips that admin configured
ssl_bump splice ssl_exclude_domains
ssl_bump splice ssl_exclude_ips

# advanced exclude acls
include "/opt/websafety/etc/squid/ssl/exclude/advanced.conf"

# now see what SSL filtering mode we are in
{% if bumpmode.value > 0 %}

    # sslbump mode - all, so take a look at server certificate
    ssl_bump stare step2 all
    
    # and decrypt all connections
    ssl_bump bump all

{% else %} 

    # sslbump mode - only targets, so see what admin configured
    acl ssl_target_domains ssl::server_name "/opt/websafety/etc/squid/ssl/target/domains.conf"    
    acl ssl_target_ips     dst              "/opt/websafety/etc/squid/ssl/target/ips.conf"    
    acl ssl_target_ips     dst              "/opt/websafety/etc/squid/ssl/target/subnets.conf"    

    # and bump it
    ssl_bump bump ssl_target_domains
    ssl_bump bump ssl_target_ips
    
    # and do not bump other connections
    ssl_bump splice all

{% endif %}





#  TAG: sslproxy_flags
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Various flags modifying the use of SSL while proxying https:// URLs:
#       DONT_VERIFY_PEER    Accept certificates that fail verification.
#               For refined control, see sslproxy_cert_error.
#       NO_DEFAULT_CA   Don't use the default CA list built in
#               to OpenSSL.
#Default:
# none

#  TAG: sslproxy_cert_error
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Use this ACL to bypass server certificate validation errors.
#
#   For example, the following lines will bypass all validation errors
#   when talking to servers for example.com. All other
#   validation errors will result in ERR_SECURE_CONNECT_FAIL error.
#
#       acl BrokenButTrustedServers dstdomain example.com
#       sslproxy_cert_error allow BrokenButTrustedServers
#       sslproxy_cert_error deny all
#
#   This clause only supports fast acl types.
#   See http://wiki.squid-cache.org/SquidFaq/SquidAcl for details.
#   Using slow acl types may result in server crashes
#
#   Without this option, all server certificate validation errors
#   terminate the transaction to protect Squid and the client.
#
#   SQUID_X509_V_ERR_INFINITE_VALIDATION error cannot be bypassed
#   but should not happen unless your OpenSSL library is buggy.
#
#   SECURITY WARNING:
#       Bypassing validation errors is dangerous because an
#       error usually implies that the server cannot be trusted
#       and the connection may be insecure.
#
#   See also: sslproxy_flags and DONT_VERIFY_PEER.
#Default:
# Server certificate errors terminate the transaction.

#  TAG: sslproxy_cert_sign
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#
#        sslproxy_cert_sign <signing algorithm> acl ...
#
#        The following certificate signing algorithms are supported:
#
#      signTrusted
#       Sign using the configured CA certificate which is usually
#       placed in and trusted by end-user browsers. This is the
#       default for trusted origin server certificates.
#
#      signUntrusted
#       Sign to guarantee an X509_V_ERR_CERT_UNTRUSTED browser error.
#       This is the default for untrusted origin server certificates
#       that are not self-signed (see ssl::certUntrusted).
#
#      signSelf
#       Sign using a self-signed certificate with the right CN to
#       generate a X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT error in the
#       browser. This is the default for self-signed origin server
#       certificates (see ssl::certSelfSigned).
#
#   This clause only supports fast acl types.
#
#   When sslproxy_cert_sign acl(s) match, Squid uses the corresponding
#   signing algorithm to generate the certificate and ignores all
#   subsequent sslproxy_cert_sign options (the first match wins). If no
#   acl(s) match, the default signing algorithm is determined by errors
#   detected when obtaining and validating the origin server certificate.
#
#   WARNING: SQUID_X509_V_ERR_DOMAIN_MISMATCH and ssl:certDomainMismatch can
#   be used with sslproxy_cert_adapt, but if and only if Squid is bumping a
#   CONNECT request that carries a domain name. In all other cases (CONNECT
#   to an IP address or an intercepted SSL connection), Squid cannot detect
#   the domain mismatch at certificate generation time when
#   bump-server-first is used.
#Default:
# none

#  TAG: sslproxy_cert_adapt
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   
#   sslproxy_cert_adapt <adaptation algorithm> acl ...
#
#   The following certificate adaptation algorithms are supported:
#
#      setValidAfter
#       Sets the "Not After" property to the "Not After" property of
#       the CA certificate used to sign generated certificates.
#
#      setValidBefore
#       Sets the "Not Before" property to the "Not Before" property of
#       the CA certificate used to sign generated certificates.
#
#      setCommonName or setCommonName{CN}
#       Sets Subject.CN property to the host name specified as a 
#       CN parameter or, if no explicit CN parameter was specified,
#       extracted from the CONNECT request. It is a misconfiguration
#       to use setCommonName without an explicit parameter for
#       intercepted or tproxied SSL connections.
#       
#   This clause only supports fast acl types.
#
#   Squid first groups sslproxy_cert_adapt options by adaptation algorithm.
#   Within a group, when sslproxy_cert_adapt acl(s) match, Squid uses the
#   corresponding adaptation algorithm to generate the certificate and
#   ignores all subsequent sslproxy_cert_adapt options in that algorithm's
#   group (i.e., the first match wins within each algorithm group). If no
#   acl(s) match, the default mimicking action takes place.
#
#   WARNING: SQUID_X509_V_ERR_DOMAIN_MISMATCH and ssl:certDomainMismatch can
#   be used with sslproxy_cert_adapt, but if and only if Squid is bumping a
#   CONNECT request that carries a domain name. In all other cases (CONNECT
#   to an IP address or an intercepted SSL connection), Squid cannot detect
#   the domain mismatch at certificate generation time when
#   bump-server-first is used.
#Default:
# none

#  TAG: sslpassword_program
# Note: This option is only available if Squid is rebuilt with the
#       --with-openssl
#
#   Specify a program used for entering SSL key passphrases
#   when using encrypted SSL certificate keys. If not specified
#   keys must either be unencrypted, or Squid started with the -N
#   option to allow it to query interactively for the passphrase.
#
#   The key file name is given as argument to the program allowing
#   selection of the right password if you have multiple encrypted
#   keys.
#Default:
# none